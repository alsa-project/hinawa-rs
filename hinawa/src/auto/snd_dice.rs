// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::SndUnit;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::ptr;

glib::wrapper! {
    #[doc(alias = "HinawaSndDice")]
    pub struct SndDice(Object<ffi::HinawaSndDice, ffi::HinawaSndDiceClass>) @extends SndUnit;

    match fn {
        type_ => || ffi::hinawa_snd_dice_get_type(),
    }
}

impl SndDice {
    pub const NONE: Option<&'static SndDice> = None;

    #[doc(alias = "hinawa_snd_dice_new")]
    pub fn new() -> SndDice {
        unsafe { from_glib_full(ffi::hinawa_snd_dice_new()) }
    }
}

impl Default for SndDice {
    fn default() -> Self {
        Self::new()
    }
}

pub trait SndDiceExt: 'static {
    #[doc(alias = "hinawa_snd_dice_open")]
    fn open(&self, path: &str) -> Result<(), glib::Error>;

    #[doc(alias = "hinawa_snd_dice_transaction")]
    fn transaction(&self, addr: u64, frame: &[u32], bit_flag: u32) -> Result<(), glib::Error>;

    #[doc(alias = "notified")]
    fn connect_notified<F: Fn(&Self, u32) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SndDice>> SndDiceExt for O {
    fn open(&self, path: &str) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::hinawa_snd_dice_open(
                self.as_ref().to_glib_none().0,
                path.to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn transaction(&self, addr: u64, frame: &[u32], bit_flag: u32) -> Result<(), glib::Error> {
        let frame_count = frame.len() as usize;
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::hinawa_snd_dice_transaction(
                self.as_ref().to_glib_none().0,
                addr,
                frame.to_glib_none().0,
                frame_count,
                bit_flag,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn connect_notified<F: Fn(&Self, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notified_trampoline<P: IsA<SndDice>, F: Fn(&P, u32) + 'static>(
            this: *mut ffi::HinawaSndDice,
            message: libc::c_uint,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SndDice::from_glib_borrow(this).unsafe_cast_ref(), message)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notified\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notified_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for SndDice {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SndDice")
    }
}
