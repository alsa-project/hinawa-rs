// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::translate::*;
use glib::value::FromValue;
use glib::value::FromValueOptional;
use glib::value::SetValue;
use glib::value::Value;
use glib::StaticType;
use glib::Type;
use gobject_sys;
use hinawa_sys;
use std::fmt;

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
pub enum FwRcode {
    Complete,
    ConflictError,
    DataError,
    TypeError,
    AddressError,
    SendError,
    Cancelled,
    Busy,
    Generation,
    NoAck,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for FwRcode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "FwRcode::{}", match *self {
            FwRcode::Complete => "Complete",
            FwRcode::ConflictError => "ConflictError",
            FwRcode::DataError => "DataError",
            FwRcode::TypeError => "TypeError",
            FwRcode::AddressError => "AddressError",
            FwRcode::SendError => "SendError",
            FwRcode::Cancelled => "Cancelled",
            FwRcode::Busy => "Busy",
            FwRcode::Generation => "Generation",
            FwRcode::NoAck => "NoAck",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for FwRcode {
    type GlibType = hinawa_sys::HinawaFwRcode;

    fn to_glib(&self) -> hinawa_sys::HinawaFwRcode {
        match *self {
            FwRcode::Complete => hinawa_sys::HINAWA_FW_RCODE_COMPLETE,
            FwRcode::ConflictError => hinawa_sys::HINAWA_FW_RCODE_CONFLICT_ERROR,
            FwRcode::DataError => hinawa_sys::HINAWA_FW_RCODE_DATA_ERROR,
            FwRcode::TypeError => hinawa_sys::HINAWA_FW_RCODE_TYPE_ERROR,
            FwRcode::AddressError => hinawa_sys::HINAWA_FW_RCODE_ADDRESS_ERROR,
            FwRcode::SendError => hinawa_sys::HINAWA_FW_RCODE_SEND_ERROR,
            FwRcode::Cancelled => hinawa_sys::HINAWA_FW_RCODE_CANCELLED,
            FwRcode::Busy => hinawa_sys::HINAWA_FW_RCODE_BUSY,
            FwRcode::Generation => hinawa_sys::HINAWA_FW_RCODE_GENERATION,
            FwRcode::NoAck => hinawa_sys::HINAWA_FW_RCODE_NO_ACK,
            FwRcode::__Unknown(value) => value
        }
    }
}

#[doc(hidden)]
impl FromGlib<hinawa_sys::HinawaFwRcode> for FwRcode {
    fn from_glib(value: hinawa_sys::HinawaFwRcode) -> Self {
        match value {
            0 => FwRcode::Complete,
            4 => FwRcode::ConflictError,
            5 => FwRcode::DataError,
            6 => FwRcode::TypeError,
            7 => FwRcode::AddressError,
            16 => FwRcode::SendError,
            17 => FwRcode::Cancelled,
            18 => FwRcode::Busy,
            19 => FwRcode::Generation,
            20 => FwRcode::NoAck,
            value => FwRcode::__Unknown(value),
        }
    }
}

impl StaticType for FwRcode {
    fn static_type() -> Type {
        unsafe { from_glib(hinawa_sys::hinawa_fw_rcode_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for FwRcode {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for FwRcode {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for FwRcode {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
pub enum FwTcode {
    WriteQuadletRequest,
    WriteBlockRequest,
    WriteResponse,
    ReadQuadletRequest,
    ReadBlockRequest,
    ReadQuadletResponse,
    ReadBlockResponse,
    CycleStart,
    LockRequest,
    StreamData,
    LockResponse,
    LockMaskSwap,
    LockCompareSwap,
    LockFetchAdd,
    LockLittleAdd,
    LockBoundedAdd,
    LockWrapAdd,
    LockVendorDependent,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for FwTcode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "FwTcode::{}", match *self {
            FwTcode::WriteQuadletRequest => "WriteQuadletRequest",
            FwTcode::WriteBlockRequest => "WriteBlockRequest",
            FwTcode::WriteResponse => "WriteResponse",
            FwTcode::ReadQuadletRequest => "ReadQuadletRequest",
            FwTcode::ReadBlockRequest => "ReadBlockRequest",
            FwTcode::ReadQuadletResponse => "ReadQuadletResponse",
            FwTcode::ReadBlockResponse => "ReadBlockResponse",
            FwTcode::CycleStart => "CycleStart",
            FwTcode::LockRequest => "LockRequest",
            FwTcode::StreamData => "StreamData",
            FwTcode::LockResponse => "LockResponse",
            FwTcode::LockMaskSwap => "LockMaskSwap",
            FwTcode::LockCompareSwap => "LockCompareSwap",
            FwTcode::LockFetchAdd => "LockFetchAdd",
            FwTcode::LockLittleAdd => "LockLittleAdd",
            FwTcode::LockBoundedAdd => "LockBoundedAdd",
            FwTcode::LockWrapAdd => "LockWrapAdd",
            FwTcode::LockVendorDependent => "LockVendorDependent",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for FwTcode {
    type GlibType = hinawa_sys::HinawaFwTcode;

    fn to_glib(&self) -> hinawa_sys::HinawaFwTcode {
        match *self {
            FwTcode::WriteQuadletRequest => hinawa_sys::HINAWA_FW_TCODE_WRITE_QUADLET_REQUEST,
            FwTcode::WriteBlockRequest => hinawa_sys::HINAWA_FW_TCODE_WRITE_BLOCK_REQUEST,
            FwTcode::WriteResponse => hinawa_sys::HINAWA_FW_TCODE_WRITE_RESPONSE,
            FwTcode::ReadQuadletRequest => hinawa_sys::HINAWA_FW_TCODE_READ_QUADLET_REQUEST,
            FwTcode::ReadBlockRequest => hinawa_sys::HINAWA_FW_TCODE_READ_BLOCK_REQUEST,
            FwTcode::ReadQuadletResponse => hinawa_sys::HINAWA_FW_TCODE_READ_QUADLET_RESPONSE,
            FwTcode::ReadBlockResponse => hinawa_sys::HINAWA_FW_TCODE_READ_BLOCK_RESPONSE,
            FwTcode::CycleStart => hinawa_sys::HINAWA_FW_TCODE_CYCLE_START,
            FwTcode::LockRequest => hinawa_sys::HINAWA_FW_TCODE_LOCK_REQUEST,
            FwTcode::StreamData => hinawa_sys::HINAWA_FW_TCODE_STREAM_DATA,
            FwTcode::LockResponse => hinawa_sys::HINAWA_FW_TCODE_LOCK_RESPONSE,
            FwTcode::LockMaskSwap => hinawa_sys::HINAWA_FW_TCODE_LOCK_MASK_SWAP,
            FwTcode::LockCompareSwap => hinawa_sys::HINAWA_FW_TCODE_LOCK_COMPARE_SWAP,
            FwTcode::LockFetchAdd => hinawa_sys::HINAWA_FW_TCODE_LOCK_FETCH_ADD,
            FwTcode::LockLittleAdd => hinawa_sys::HINAWA_FW_TCODE_LOCK_LITTLE_ADD,
            FwTcode::LockBoundedAdd => hinawa_sys::HINAWA_FW_TCODE_LOCK_BOUNDED_ADD,
            FwTcode::LockWrapAdd => hinawa_sys::HINAWA_FW_TCODE_LOCK_WRAP_ADD,
            FwTcode::LockVendorDependent => hinawa_sys::HINAWA_FW_TCODE_LOCK_VENDOR_DEPENDENT,
            FwTcode::__Unknown(value) => value
        }
    }
}

#[doc(hidden)]
impl FromGlib<hinawa_sys::HinawaFwTcode> for FwTcode {
    fn from_glib(value: hinawa_sys::HinawaFwTcode) -> Self {
        match value {
            0 => FwTcode::WriteQuadletRequest,
            1 => FwTcode::WriteBlockRequest,
            2 => FwTcode::WriteResponse,
            4 => FwTcode::ReadQuadletRequest,
            5 => FwTcode::ReadBlockRequest,
            6 => FwTcode::ReadQuadletResponse,
            7 => FwTcode::ReadBlockResponse,
            8 => FwTcode::CycleStart,
            9 => FwTcode::LockRequest,
            10 => FwTcode::StreamData,
            11 => FwTcode::LockResponse,
            17 => FwTcode::LockMaskSwap,
            18 => FwTcode::LockCompareSwap,
            19 => FwTcode::LockFetchAdd,
            20 => FwTcode::LockLittleAdd,
            21 => FwTcode::LockBoundedAdd,
            22 => FwTcode::LockWrapAdd,
            23 => FwTcode::LockVendorDependent,
            value => FwTcode::__Unknown(value),
        }
    }
}

impl StaticType for FwTcode {
    fn static_type() -> Type {
        unsafe { from_glib(hinawa_sys::hinawa_fw_tcode_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for FwTcode {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for FwTcode {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for FwTcode {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
pub enum SndUnitType {
    Dice,
    Fireworks,
    Bebob,
    Oxfw,
    Digi00x,
    Tascam,
    Motu,
    Fireface,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for SndUnitType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SndUnitType::{}", match *self {
            SndUnitType::Dice => "Dice",
            SndUnitType::Fireworks => "Fireworks",
            SndUnitType::Bebob => "Bebob",
            SndUnitType::Oxfw => "Oxfw",
            SndUnitType::Digi00x => "Digi00x",
            SndUnitType::Tascam => "Tascam",
            SndUnitType::Motu => "Motu",
            SndUnitType::Fireface => "Fireface",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for SndUnitType {
    type GlibType = hinawa_sys::HinawaSndUnitType;

    fn to_glib(&self) -> hinawa_sys::HinawaSndUnitType {
        match *self {
            SndUnitType::Dice => hinawa_sys::HINAWA_SND_UNIT_TYPE_DICE,
            SndUnitType::Fireworks => hinawa_sys::HINAWA_SND_UNIT_TYPE_FIREWORKS,
            SndUnitType::Bebob => hinawa_sys::HINAWA_SND_UNIT_TYPE_BEBOB,
            SndUnitType::Oxfw => hinawa_sys::HINAWA_SND_UNIT_TYPE_OXFW,
            SndUnitType::Digi00x => hinawa_sys::HINAWA_SND_UNIT_TYPE_DIGI00X,
            SndUnitType::Tascam => hinawa_sys::HINAWA_SND_UNIT_TYPE_TASCAM,
            SndUnitType::Motu => hinawa_sys::HINAWA_SND_UNIT_TYPE_MOTU,
            SndUnitType::Fireface => hinawa_sys::HINAWA_SND_UNIT_TYPE_FIREFACE,
            SndUnitType::__Unknown(value) => value
        }
    }
}

#[doc(hidden)]
impl FromGlib<hinawa_sys::HinawaSndUnitType> for SndUnitType {
    fn from_glib(value: hinawa_sys::HinawaSndUnitType) -> Self {
        match value {
            1 => SndUnitType::Dice,
            2 => SndUnitType::Fireworks,
            3 => SndUnitType::Bebob,
            4 => SndUnitType::Oxfw,
            5 => SndUnitType::Digi00x,
            6 => SndUnitType::Tascam,
            7 => SndUnitType::Motu,
            8 => SndUnitType::Fireface,
            value => SndUnitType::__Unknown(value),
        }
    }
}

impl StaticType for SndUnitType {
    fn static_type() -> Type {
        unsafe { from_glib(hinawa_sys::hinawa_snd_unit_type_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for SndUnitType {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for SndUnitType {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_enum(value.to_glib_none().0))
    }
}

impl SetValue for SndUnitType {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_enum(value.to_glib_none_mut().0, this.to_glib())
    }
}

