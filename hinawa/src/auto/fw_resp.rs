// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use hinawa_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::ptr;
use FwNode;
use FwRcode;
use FwTcode;

glib_wrapper! {
    pub struct FwResp(Object<hinawa_sys::HinawaFwResp, hinawa_sys::HinawaFwRespClass, FwRespClass>);

    match fn {
        get_type => || hinawa_sys::hinawa_fw_resp_get_type(),
    }
}

impl FwResp {
    pub fn new() -> FwResp {
        unsafe {
            from_glib_full(hinawa_sys::hinawa_fw_resp_new())
        }
    }
}

impl Default for FwResp {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_FW_RESP: Option<&FwResp> = None;

pub trait FwRespExt: 'static {
    fn release(&self);

    fn reserve<P: IsA<FwNode>>(&self, node: &P, addr: u64, width: u32) -> Result<(), glib::Error>;

    fn set_resp_frame(&self, frame: &[u8]);

    fn get_property_is_reserved(&self) -> bool;

    fn connect_requested<F: Fn(&Self, FwTcode) -> FwRcode + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_is_reserved_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<FwResp>> FwRespExt for O {
    fn release(&self) {
        unsafe {
            hinawa_sys::hinawa_fw_resp_release(self.as_ref().to_glib_none().0);
        }
    }

    fn reserve<P: IsA<FwNode>>(&self, node: &P, addr: u64, width: u32) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = hinawa_sys::hinawa_fw_resp_reserve(self.as_ref().to_glib_none().0, node.as_ref().to_glib_none().0, addr, width, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn set_resp_frame(&self, frame: &[u8]) {
        let length = frame.len() as usize;
        unsafe {
            hinawa_sys::hinawa_fw_resp_set_resp_frame(self.as_ref().to_glib_none().0, frame.to_glib_none().0, length);
        }
    }

    fn get_property_is_reserved(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"is-reserved\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `is-reserved` getter").unwrap()
        }
    }

    fn connect_requested<F: Fn(&Self, FwTcode) -> FwRcode + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn requested_trampoline<P, F: Fn(&P, FwTcode) -> FwRcode + 'static>(this: *mut hinawa_sys::HinawaFwResp, tcode: hinawa_sys::HinawaFwTcode, f: glib_sys::gpointer) -> hinawa_sys::HinawaFwRcode
            where P: IsA<FwResp>
        {
            let f: &F = &*(f as *const F);
            f(&FwResp::from_glib_borrow(this).unsafe_cast_ref(), from_glib(tcode)).to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"requested\0".as_ptr() as *const _,
                Some(transmute(requested_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_is_reserved_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_is_reserved_trampoline<P, F: Fn(&P) + 'static>(this: *mut hinawa_sys::HinawaFwResp, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<FwResp>
        {
            let f: &F = &*(f as *const F);
            f(&FwResp::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::is-reserved\0".as_ptr() as *const _,
                Some(transmute(notify_is_reserved_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for FwResp {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "FwResp")
    }
}
