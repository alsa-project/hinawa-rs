// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib;
use glib::object::IsA;
use glib::translate::*;
use hinawa_sys;
use std::fmt;
use std::mem;
use std::ptr;
use SndUnit;

glib_wrapper! {
    pub struct SndEfw(Object<hinawa_sys::HinawaSndEfw, hinawa_sys::HinawaSndEfwClass, SndEfwClass>) @extends SndUnit;

    match fn {
        get_type => || hinawa_sys::hinawa_snd_efw_get_type(),
    }
}

impl SndEfw {
    pub fn new() -> SndEfw {
        unsafe {
            from_glib_full(hinawa_sys::hinawa_snd_efw_new())
        }
    }
}

impl Default for SndEfw {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_SND_EFW: Option<&SndEfw> = None;

pub trait SndEfwExt: 'static {
    fn open(&self, path: &str) -> Result<(), glib::Error>;

    fn transaction_async(&self, category: u32, command: u32, args: &[u32]) -> Result<u32, glib::Error>;
}

impl<O: IsA<SndEfw>> SndEfwExt for O {
    fn open(&self, path: &str) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = hinawa_sys::hinawa_snd_efw_open(self.as_ref().to_glib_none().0, path.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn transaction_async(&self, category: u32, command: u32, args: &[u32]) -> Result<u32, glib::Error> {
        let arg_count = args.len() as usize;
        unsafe {
            let mut resp_seqnum = mem::MaybeUninit::uninit();
            let mut error = ptr::null_mut();
            let _ = hinawa_sys::hinawa_snd_efw_transaction_async(self.as_ref().to_glib_none().0, category, command, args.to_glib_none().0, arg_count, resp_seqnum.as_mut_ptr(), &mut error);
            let resp_seqnum = resp_seqnum.assume_init();
            if error.is_null() { Ok(resp_seqnum) } else { Err(from_glib_full(error)) }
        }
    }
}

impl fmt::Display for SndEfw {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SndEfw")
    }
}
