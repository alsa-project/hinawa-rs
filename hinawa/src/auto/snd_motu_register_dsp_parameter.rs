// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::translate::*;
use std::mem;

glib::wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct SndMotuRegisterDspParameter(Boxed<ffi::HinawaSndMotuRegisterDspParameter>);

    match fn {
        copy => |ptr| glib::gobject_ffi::g_boxed_copy(ffi::hinawa_snd_motu_register_dsp_parameter_get_type(), ptr as *mut _) as *mut ffi::HinawaSndMotuRegisterDspParameter,
        free => |ptr| glib::gobject_ffi::g_boxed_free(ffi::hinawa_snd_motu_register_dsp_parameter_get_type(), ptr as *mut _),
        type_ => || ffi::hinawa_snd_motu_register_dsp_parameter_get_type(),
    }
}

impl SndMotuRegisterDspParameter {
    #[doc(alias = "hinawa_snd_motu_register_dsp_parameter_new")]
    pub fn new() -> SndMotuRegisterDspParameter {
        unsafe { from_glib_full(ffi::hinawa_snd_motu_register_dsp_parameter_new()) }
    }

    #[doc(alias = "hinawa_snd_motu_register_dsp_parameter_get_headphone_output_paired_assignment")]
    #[doc(alias = "get_headphone_output_paired_assignment")]
    pub fn headphone_output_paired_assignment(&self) -> u8 {
        unsafe {
            let mut assignment = mem::MaybeUninit::uninit();
            ffi::hinawa_snd_motu_register_dsp_parameter_get_headphone_output_paired_assignment(
                self.to_glib_none().0,
                assignment.as_mut_ptr(),
            );
            let assignment = assignment.assume_init();
            assignment
        }
    }

    #[doc(alias = "hinawa_snd_motu_register_dsp_parameter_get_headphone_output_paired_volume")]
    #[doc(alias = "get_headphone_output_paired_volume")]
    pub fn headphone_output_paired_volume(&self) -> u8 {
        unsafe {
            let mut volume = mem::MaybeUninit::uninit();
            ffi::hinawa_snd_motu_register_dsp_parameter_get_headphone_output_paired_volume(
                self.to_glib_none().0,
                volume.as_mut_ptr(),
            );
            let volume = volume.assume_init();
            volume
        }
    }

    #[doc(alias = "hinawa_snd_motu_register_dsp_parameter_get_line_input_boost_flag")]
    #[doc(alias = "get_line_input_boost_flag")]
    pub fn line_input_boost_flag(&self) -> u8 {
        unsafe {
            let mut boost_flag = mem::MaybeUninit::uninit();
            ffi::hinawa_snd_motu_register_dsp_parameter_get_line_input_boost_flag(
                self.to_glib_none().0,
                boost_flag.as_mut_ptr(),
            );
            let boost_flag = boost_flag.assume_init();
            boost_flag
        }
    }

    #[doc(alias = "hinawa_snd_motu_register_dsp_parameter_get_line_input_nominal_level_flag")]
    #[doc(alias = "get_line_input_nominal_level_flag")]
    pub fn line_input_nominal_level_flag(&self) -> u8 {
        unsafe {
            let mut nominal_level_flag = mem::MaybeUninit::uninit();
            ffi::hinawa_snd_motu_register_dsp_parameter_get_line_input_nominal_level_flag(
                self.to_glib_none().0,
                nominal_level_flag.as_mut_ptr(),
            );
            let nominal_level_flag = nominal_level_flag.assume_init();
            nominal_level_flag
        }
    }

    #[doc(alias = "hinawa_snd_motu_register_dsp_parameter_get_main_output_paired_volume")]
    #[doc(alias = "get_main_output_paired_volume")]
    pub fn main_output_paired_volume(&self) -> u8 {
        unsafe {
            let mut volume = mem::MaybeUninit::uninit();
            ffi::hinawa_snd_motu_register_dsp_parameter_get_main_output_paired_volume(
                self.to_glib_none().0,
                volume.as_mut_ptr(),
            );
            let volume = volume.assume_init();
            volume
        }
    }
}

impl Default for SndMotuRegisterDspParameter {
    fn default() -> Self {
        Self::new()
    }
}
