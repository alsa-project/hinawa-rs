// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use hinawa_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::ptr;
use FwNode;
use SndUnitType;

glib_wrapper! {
    pub struct SndUnit(Object<hinawa_sys::HinawaSndUnit, hinawa_sys::HinawaSndUnitClass, SndUnitClass>);

    match fn {
        get_type => || hinawa_sys::hinawa_snd_unit_get_type(),
    }
}

impl SndUnit {
    pub fn new() -> SndUnit {
        unsafe {
            from_glib_full(hinawa_sys::hinawa_snd_unit_new())
        }
    }
}

impl Default for SndUnit {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_SND_UNIT: Option<&SndUnit> = None;

pub trait SndUnitExt: 'static {
    fn create_source(&self) -> Result<glib::Source, glib::Error>;

    fn get_node(&self) -> FwNode;

    fn lock(&self) -> Result<(), glib::Error>;

    fn open(&self, path: &str) -> Result<(), glib::Error>;

    fn unlock(&self) -> Result<(), glib::Error>;

    fn get_property_card(&self) -> u32;

    fn get_property_device(&self) -> Option<GString>;

    fn get_property_guid(&self) -> u64;

    fn get_property_streaming(&self) -> bool;

    fn get_property_type(&self) -> SndUnitType;

    fn connect_disconnected<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_lock_status<F: Fn(&Self, bool) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_card_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_device_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_guid_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_streaming_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SndUnit>> SndUnitExt for O {
    fn create_source(&self) -> Result<glib::Source, glib::Error> {
        unsafe {
            let mut gsrc = ptr::null_mut();
            let mut error = ptr::null_mut();
            let _ = hinawa_sys::hinawa_snd_unit_create_source(self.as_ref().to_glib_none().0, &mut gsrc, &mut error);
            if error.is_null() { Ok(from_glib_full(gsrc)) } else { Err(from_glib_full(error)) }
        }
    }

    fn get_node(&self) -> FwNode {
        unsafe {
            let mut node = ptr::null_mut();
            hinawa_sys::hinawa_snd_unit_get_node(self.as_ref().to_glib_none().0, &mut node);
            from_glib_none(node)
        }
    }

    fn lock(&self) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = hinawa_sys::hinawa_snd_unit_lock(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn open(&self, path: &str) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = hinawa_sys::hinawa_snd_unit_open(self.as_ref().to_glib_none().0, path.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn unlock(&self) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = hinawa_sys::hinawa_snd_unit_unlock(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn get_property_card(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"card\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `card` getter").unwrap()
        }
    }

    fn get_property_device(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"device\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `device` getter")
        }
    }

    fn get_property_guid(&self) -> u64 {
        unsafe {
            let mut value = Value::from_type(<u64 as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"guid\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `guid` getter").unwrap()
        }
    }

    fn get_property_streaming(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"streaming\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `streaming` getter").unwrap()
        }
    }

    fn get_property_type(&self) -> SndUnitType {
        unsafe {
            let mut value = Value::from_type(<SndUnitType as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"type\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `type` getter").unwrap()
        }
    }

    fn connect_disconnected<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn disconnected_trampoline<P, F: Fn(&P) + 'static>(this: *mut hinawa_sys::HinawaSndUnit, f: glib_sys::gpointer)
            where P: IsA<SndUnit>
        {
            let f: &F = &*(f as *const F);
            f(&SndUnit::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"disconnected\0".as_ptr() as *const _,
                Some(transmute(disconnected_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_lock_status<F: Fn(&Self, bool) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn lock_status_trampoline<P, F: Fn(&P, bool) + 'static>(this: *mut hinawa_sys::HinawaSndUnit, state: glib_sys::gboolean, f: glib_sys::gpointer)
            where P: IsA<SndUnit>
        {
            let f: &F = &*(f as *const F);
            f(&SndUnit::from_glib_borrow(this).unsafe_cast_ref(), from_glib(state))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"lock-status\0".as_ptr() as *const _,
                Some(transmute(lock_status_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_card_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_card_trampoline<P, F: Fn(&P) + 'static>(this: *mut hinawa_sys::HinawaSndUnit, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<SndUnit>
        {
            let f: &F = &*(f as *const F);
            f(&SndUnit::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::card\0".as_ptr() as *const _,
                Some(transmute(notify_card_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_device_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_device_trampoline<P, F: Fn(&P) + 'static>(this: *mut hinawa_sys::HinawaSndUnit, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<SndUnit>
        {
            let f: &F = &*(f as *const F);
            f(&SndUnit::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::device\0".as_ptr() as *const _,
                Some(transmute(notify_device_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_guid_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_guid_trampoline<P, F: Fn(&P) + 'static>(this: *mut hinawa_sys::HinawaSndUnit, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<SndUnit>
        {
            let f: &F = &*(f as *const F);
            f(&SndUnit::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::guid\0".as_ptr() as *const _,
                Some(transmute(notify_guid_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_streaming_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_streaming_trampoline<P, F: Fn(&P) + 'static>(this: *mut hinawa_sys::HinawaSndUnit, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<SndUnit>
        {
            let f: &F = &*(f as *const F);
            f(&SndUnit::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::streaming\0".as_ptr() as *const _,
                Some(transmute(notify_streaming_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_type_trampoline<P, F: Fn(&P) + 'static>(this: *mut hinawa_sys::HinawaSndUnit, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<SndUnit>
        {
            let f: &F = &*(f as *const F);
            f(&SndUnit::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::type\0".as_ptr() as *const _,
                Some(transmute(notify_type_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for SndUnit {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SndUnit")
    }
}
