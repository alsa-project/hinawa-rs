// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_sys;
use hinawa_sys;
use libc;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::ptr;
use SndUnit;

glib_wrapper! {
    pub struct SndTscm(Object<hinawa_sys::HinawaSndTscm, hinawa_sys::HinawaSndTscmClass, SndTscmClass>) @extends SndUnit;

    match fn {
        get_type => || hinawa_sys::hinawa_snd_tscm_get_type(),
    }
}

impl SndTscm {
    pub fn new() -> SndTscm {
        unsafe {
            from_glib_full(hinawa_sys::hinawa_snd_tscm_new())
        }
    }
}

impl Default for SndTscm {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_SND_TSCM: Option<&SndTscm> = None;

pub trait SndTscmExt: 'static {
    fn open(&self, path: &str) -> Result<(), glib::Error>;

    fn connect_control<F: Fn(&Self, u32, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SndTscm>> SndTscmExt for O {
    fn open(&self, path: &str) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = hinawa_sys::hinawa_snd_tscm_open(self.as_ref().to_glib_none().0, path.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn connect_control<F: Fn(&Self, u32, u32, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn control_trampoline<P, F: Fn(&P, u32, u32, u32) + 'static>(this: *mut hinawa_sys::HinawaSndTscm, index: libc::c_uint, before: libc::c_uint, after: libc::c_uint, f: glib_sys::gpointer)
            where P: IsA<SndTscm>
        {
            let f: &F = &*(f as *const F);
            f(&SndTscm::from_glib_borrow(this).unsafe_cast_ref(), index, before, after)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"control\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(control_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for SndTscm {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SndTscm")
    }
}
