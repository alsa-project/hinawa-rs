// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_sys;
use hinawa_sys;
use libc;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use SndUnit;

glib_wrapper! {
    pub struct SndMotu(Object<hinawa_sys::HinawaSndMotu, hinawa_sys::HinawaSndMotuClass, SndMotuClass>) @extends SndUnit;

    match fn {
        get_type => || hinawa_sys::hinawa_snd_motu_get_type(),
    }
}

impl SndMotu {
    pub fn new() -> SndMotu {
        unsafe {
            from_glib_full(hinawa_sys::hinawa_snd_motu_new())
        }
    }
}

impl Default for SndMotu {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_SND_MOTU: Option<&SndMotu> = None;

pub trait SndMotuExt: 'static {
    fn connect_notified<F: Fn(&Self, u32) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SndMotu>> SndMotuExt for O {
    fn connect_notified<F: Fn(&Self, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notified_trampoline<P, F: Fn(&P, u32) + 'static>(this: *mut hinawa_sys::HinawaSndMotu, message: libc::c_uint, f: glib_sys::gpointer)
            where P: IsA<SndMotu>
        {
            let f: &F = &*(f as *const F);
            f(&SndMotu::from_glib_borrow(this).unsafe_cast_ref(), message)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notified\0".as_ptr() as *const _,
                Some(transmute(notified_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for SndMotu {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SndMotu")
    }
}
