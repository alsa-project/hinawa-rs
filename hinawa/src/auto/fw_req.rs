// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use hinawa_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct FwReq(Object<hinawa_sys::HinawaFwReq, hinawa_sys::HinawaFwReqClass, FwReqClass>);

    match fn {
        get_type => || hinawa_sys::hinawa_fw_req_get_type(),
    }
}

impl FwReq {
    pub fn new() -> FwReq {
        unsafe {
            from_glib_full(hinawa_sys::hinawa_fw_req_new())
        }
    }
}

impl Default for FwReq {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_FW_REQ: Option<&FwReq> = None;

pub trait FwReqExt: 'static {
    #[deprecated]
    fn get_property_timeout(&self) -> u32;

    #[deprecated]
    fn set_property_timeout(&self, timeout: u32);

    #[deprecated]
    fn connect_property_timeout_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<FwReq>> FwReqExt for O {
    fn get_property_timeout(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"timeout\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `timeout` getter").unwrap()
        }
    }

    fn set_property_timeout(&self, timeout: u32) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"timeout\0".as_ptr() as *const _, Value::from(&timeout).to_glib_none().0);
        }
    }

    fn connect_property_timeout_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_timeout_trampoline<P, F: Fn(&P) + 'static>(this: *mut hinawa_sys::HinawaFwReq, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<FwReq>
        {
            let f: &F = &*(f as *const F);
            f(&FwReq::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::timeout\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_timeout_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for FwReq {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "FwReq")
    }
}
