// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use hinawa_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct FwNode(Object<hinawa_sys::HinawaFwNode, hinawa_sys::HinawaFwNodeClass, FwNodeClass>);

    match fn {
        get_type => || hinawa_sys::hinawa_fw_node_get_type(),
    }
}

impl FwNode {
    pub fn new() -> FwNode {
        unsafe {
            from_glib_full(hinawa_sys::hinawa_fw_node_new())
        }
    }
}

impl Default for FwNode {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_FW_NODE: Option<&FwNode> = None;

pub trait FwNodeExt: 'static {
    fn create_source(&self) -> Result<glib::Source, glib::Error>;

    fn open(&self, path: &str) -> Result<(), glib::Error>;

    fn get_property_bus_manager_node_id(&self) -> u32;

    fn get_property_generation(&self) -> u32;

    fn get_property_ir_manager_node_id(&self) -> u32;

    fn get_property_local_node_id(&self) -> u32;

    fn get_property_node_id(&self) -> u32;

    fn get_property_root_node_id(&self) -> u32;

    fn connect_bus_update<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_disconnected<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_bus_manager_node_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_generation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_ir_manager_node_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_local_node_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_node_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_root_node_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<FwNode>> FwNodeExt for O {
    fn create_source(&self) -> Result<glib::Source, glib::Error> {
        unsafe {
            let mut gsrc = ptr::null_mut();
            let mut error = ptr::null_mut();
            let _ = hinawa_sys::hinawa_fw_node_create_source(self.as_ref().to_glib_none().0, &mut gsrc, &mut error);
            if error.is_null() { Ok(from_glib_full(gsrc)) } else { Err(from_glib_full(error)) }
        }
    }

    fn open(&self, path: &str) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = hinawa_sys::hinawa_fw_node_open(self.as_ref().to_glib_none().0, path.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn get_property_bus_manager_node_id(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"bus-manager-node-id\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `bus-manager-node-id` getter").unwrap()
        }
    }

    fn get_property_generation(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"generation\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `generation` getter").unwrap()
        }
    }

    fn get_property_ir_manager_node_id(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"ir-manager-node-id\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `ir-manager-node-id` getter").unwrap()
        }
    }

    fn get_property_local_node_id(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"local-node-id\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `local-node-id` getter").unwrap()
        }
    }

    fn get_property_node_id(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"node-id\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `node-id` getter").unwrap()
        }
    }

    fn get_property_root_node_id(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"root-node-id\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `root-node-id` getter").unwrap()
        }
    }

    fn connect_bus_update<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn bus_update_trampoline<P, F: Fn(&P) + 'static>(this: *mut hinawa_sys::HinawaFwNode, f: glib_sys::gpointer)
            where P: IsA<FwNode>
        {
            let f: &F = &*(f as *const F);
            f(&FwNode::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"bus-update\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(bus_update_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_disconnected<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn disconnected_trampoline<P, F: Fn(&P) + 'static>(this: *mut hinawa_sys::HinawaFwNode, f: glib_sys::gpointer)
            where P: IsA<FwNode>
        {
            let f: &F = &*(f as *const F);
            f(&FwNode::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"disconnected\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(disconnected_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_bus_manager_node_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_bus_manager_node_id_trampoline<P, F: Fn(&P) + 'static>(this: *mut hinawa_sys::HinawaFwNode, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<FwNode>
        {
            let f: &F = &*(f as *const F);
            f(&FwNode::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::bus-manager-node-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_bus_manager_node_id_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_generation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_generation_trampoline<P, F: Fn(&P) + 'static>(this: *mut hinawa_sys::HinawaFwNode, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<FwNode>
        {
            let f: &F = &*(f as *const F);
            f(&FwNode::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::generation\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_generation_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_ir_manager_node_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_ir_manager_node_id_trampoline<P, F: Fn(&P) + 'static>(this: *mut hinawa_sys::HinawaFwNode, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<FwNode>
        {
            let f: &F = &*(f as *const F);
            f(&FwNode::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::ir-manager-node-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_ir_manager_node_id_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_local_node_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_local_node_id_trampoline<P, F: Fn(&P) + 'static>(this: *mut hinawa_sys::HinawaFwNode, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<FwNode>
        {
            let f: &F = &*(f as *const F);
            f(&FwNode::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::local-node-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_local_node_id_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_node_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_node_id_trampoline<P, F: Fn(&P) + 'static>(this: *mut hinawa_sys::HinawaFwNode, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<FwNode>
        {
            let f: &F = &*(f as *const F);
            f(&FwNode::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::node-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_node_id_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_root_node_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_root_node_id_trampoline<P, F: Fn(&P) + 'static>(this: *mut hinawa_sys::HinawaFwNode, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<FwNode>
        {
            let f: &F = &*(f as *const F);
            f(&FwNode::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::root-node-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_root_node_id_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for FwNode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "FwNode")
    }
}
