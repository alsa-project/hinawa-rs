// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::translate::*;
use gobject_sys;
use hinawa_sys;
use std::mem;

glib_wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct SndMotuRegisterDspParameter(Boxed<hinawa_sys::HinawaSndMotuRegisterDspParameter>);

    match fn {
        copy => |ptr| gobject_sys::g_boxed_copy(hinawa_sys::hinawa_snd_motu_register_dsp_parameter_get_type(), ptr as *mut _) as *mut hinawa_sys::HinawaSndMotuRegisterDspParameter,
        free => |ptr| gobject_sys::g_boxed_free(hinawa_sys::hinawa_snd_motu_register_dsp_parameter_get_type(), ptr as *mut _),
        get_type => || hinawa_sys::hinawa_snd_motu_register_dsp_parameter_get_type(),
    }
}

impl SndMotuRegisterDspParameter {
    pub fn new() -> SndMotuRegisterDspParameter {
        unsafe {
            from_glib_full(hinawa_sys::hinawa_snd_motu_register_dsp_parameter_new())
        }
    }

    pub fn get_headphone_output_paired_assignment(&self) -> u8 {
        unsafe {
            let mut assignment = mem::MaybeUninit::uninit();
            hinawa_sys::hinawa_snd_motu_register_dsp_parameter_get_headphone_output_paired_assignment(self.to_glib_none().0, assignment.as_mut_ptr());
            let assignment = assignment.assume_init();
            assignment
        }
    }

    pub fn get_headphone_output_paired_volume(&self) -> u8 {
        unsafe {
            let mut volume = mem::MaybeUninit::uninit();
            hinawa_sys::hinawa_snd_motu_register_dsp_parameter_get_headphone_output_paired_volume(self.to_glib_none().0, volume.as_mut_ptr());
            let volume = volume.assume_init();
            volume
        }
    }

    pub fn get_line_input_boost_flag(&self) -> u8 {
        unsafe {
            let mut boost_flag = mem::MaybeUninit::uninit();
            hinawa_sys::hinawa_snd_motu_register_dsp_parameter_get_line_input_boost_flag(self.to_glib_none().0, boost_flag.as_mut_ptr());
            let boost_flag = boost_flag.assume_init();
            boost_flag
        }
    }

    pub fn get_line_input_nominal_level_flag(&self) -> u8 {
        unsafe {
            let mut nominal_level_flag = mem::MaybeUninit::uninit();
            hinawa_sys::hinawa_snd_motu_register_dsp_parameter_get_line_input_nominal_level_flag(self.to_glib_none().0, nominal_level_flag.as_mut_ptr());
            let nominal_level_flag = nominal_level_flag.assume_init();
            nominal_level_flag
        }
    }

    pub fn get_main_output_paired_volume(&self) -> u8 {
        unsafe {
            let mut volume = mem::MaybeUninit::uninit();
            hinawa_sys::hinawa_snd_motu_register_dsp_parameter_get_main_output_paired_volume(self.to_glib_none().0, volume.as_mut_ptr());
            let volume = volume.assume_init();
            volume
        }
    }
}

impl Default for SndMotuRegisterDspParameter {
    fn default() -> Self {
        Self::new()
    }
}
