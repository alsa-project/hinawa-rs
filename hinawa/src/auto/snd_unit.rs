// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::FwNode;
use crate::SndUnitType;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::ptr;

glib::wrapper! {
    #[doc(alias = "HinawaSndUnit")]
    pub struct SndUnit(Object<ffi::HinawaSndUnit, ffi::HinawaSndUnitClass>);

    match fn {
        type_ => || ffi::hinawa_snd_unit_get_type(),
    }
}

impl SndUnit {
    pub const NONE: Option<&'static SndUnit> = None;

    #[doc(alias = "hinawa_snd_unit_new")]
    pub fn new() -> SndUnit {
        unsafe { from_glib_full(ffi::hinawa_snd_unit_new()) }
    }
}

impl Default for SndUnit {
    fn default() -> Self {
        Self::new()
    }
}

pub trait SndUnitExt: 'static {
    #[doc(alias = "hinawa_snd_unit_create_source")]
    fn create_source(&self) -> Result<glib::Source, glib::Error>;

    #[doc(alias = "hinawa_snd_unit_get_node")]
    #[doc(alias = "get_node")]
    fn node(&self) -> FwNode;

    #[doc(alias = "hinawa_snd_unit_lock")]
    fn lock(&self) -> Result<(), glib::Error>;

    #[doc(alias = "hinawa_snd_unit_unlock")]
    fn unlock(&self) -> Result<(), glib::Error>;

    fn card(&self) -> u32;

    fn device(&self) -> Option<glib::GString>;

    fn guid(&self) -> u64;

    fn is_streaming(&self) -> bool;

    #[doc(alias = "type")]
    fn type_(&self) -> SndUnitType;

    #[doc(alias = "disconnected")]
    fn connect_disconnected<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "lock-status")]
    fn connect_lock_status<F: Fn(&Self, bool) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "card")]
    fn connect_card_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "device")]
    fn connect_device_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "guid")]
    fn connect_guid_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "streaming")]
    fn connect_streaming_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "type")]
    fn connect_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SndUnit>> SndUnitExt for O {
    fn create_source(&self) -> Result<glib::Source, glib::Error> {
        unsafe {
            let mut gsrc = ptr::null_mut();
            let mut error = ptr::null_mut();
            let _ = ffi::hinawa_snd_unit_create_source(
                self.as_ref().to_glib_none().0,
                &mut gsrc,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(gsrc))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn node(&self) -> FwNode {
        unsafe {
            let mut node = ptr::null_mut();
            ffi::hinawa_snd_unit_get_node(self.as_ref().to_glib_none().0, &mut node);
            from_glib_none(node)
        }
    }

    fn lock(&self) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::hinawa_snd_unit_lock(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn unlock(&self) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::hinawa_snd_unit_unlock(self.as_ref().to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn card(&self) -> u32 {
        glib::ObjectExt::property(self.as_ref(), "card")
    }

    fn device(&self) -> Option<glib::GString> {
        glib::ObjectExt::property(self.as_ref(), "device")
    }

    fn guid(&self) -> u64 {
        glib::ObjectExt::property(self.as_ref(), "guid")
    }

    fn is_streaming(&self) -> bool {
        glib::ObjectExt::property(self.as_ref(), "streaming")
    }

    fn type_(&self) -> SndUnitType {
        glib::ObjectExt::property(self.as_ref(), "type")
    }

    fn connect_disconnected<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn disconnected_trampoline<P: IsA<SndUnit>, F: Fn(&P) + 'static>(
            this: *mut ffi::HinawaSndUnit,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SndUnit::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"disconnected\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    disconnected_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_lock_status<F: Fn(&Self, bool) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn lock_status_trampoline<P: IsA<SndUnit>, F: Fn(&P, bool) + 'static>(
            this: *mut ffi::HinawaSndUnit,
            state: glib::ffi::gboolean,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(
                SndUnit::from_glib_borrow(this).unsafe_cast_ref(),
                from_glib(state),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"lock-status\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    lock_status_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_card_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_card_trampoline<P: IsA<SndUnit>, F: Fn(&P) + 'static>(
            this: *mut ffi::HinawaSndUnit,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SndUnit::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::card\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_card_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_device_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_device_trampoline<P: IsA<SndUnit>, F: Fn(&P) + 'static>(
            this: *mut ffi::HinawaSndUnit,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SndUnit::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::device\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_device_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_guid_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_guid_trampoline<P: IsA<SndUnit>, F: Fn(&P) + 'static>(
            this: *mut ffi::HinawaSndUnit,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SndUnit::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::guid\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_guid_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_streaming_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_streaming_trampoline<P: IsA<SndUnit>, F: Fn(&P) + 'static>(
            this: *mut ffi::HinawaSndUnit,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SndUnit::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::streaming\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_streaming_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_type_trampoline<P: IsA<SndUnit>, F: Fn(&P) + 'static>(
            this: *mut ffi::HinawaSndUnit,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SndUnit::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::type\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_type_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for SndUnit {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SndUnit")
    }
}
