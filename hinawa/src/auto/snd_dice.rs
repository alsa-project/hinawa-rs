// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib_sys;
use hinawa_sys;
use libc;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::ptr;
use SndUnit;

glib_wrapper! {
    pub struct SndDice(Object<hinawa_sys::HinawaSndDice, hinawa_sys::HinawaSndDiceClass, SndDiceClass>) @extends SndUnit;

    match fn {
        get_type => || hinawa_sys::hinawa_snd_dice_get_type(),
    }
}

impl SndDice {
    pub fn new() -> SndDice {
        unsafe {
            from_glib_full(hinawa_sys::hinawa_snd_dice_new())
        }
    }
}

impl Default for SndDice {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_SND_DICE: Option<&SndDice> = None;

pub trait SndDiceExt: 'static {
    fn open(&self, path: &str) -> Result<(), glib::Error>;

    fn transaction(&self, addr: u64, frame: &[u32], bit_flag: u32) -> Result<(), glib::Error>;

    fn connect_notified<F: Fn(&Self, u32) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<SndDice>> SndDiceExt for O {
    fn open(&self, path: &str) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = hinawa_sys::hinawa_snd_dice_open(self.as_ref().to_glib_none().0, path.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn transaction(&self, addr: u64, frame: &[u32], bit_flag: u32) -> Result<(), glib::Error> {
        let frame_count = frame.len() as usize;
        unsafe {
            let mut error = ptr::null_mut();
            let _ = hinawa_sys::hinawa_snd_dice_transaction(self.as_ref().to_glib_none().0, addr, frame.to_glib_none().0, frame_count, bit_flag, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn connect_notified<F: Fn(&Self, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notified_trampoline<P, F: Fn(&P, u32) + 'static>(this: *mut hinawa_sys::HinawaSndDice, message: libc::c_uint, f: glib_sys::gpointer)
            where P: IsA<SndDice>
        {
            let f: &F = &*(f as *const F);
            f(&SndDice::from_glib_borrow(this).unsafe_cast_ref(), message)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notified\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notified_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for SndDice {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SndDice")
    }
}
