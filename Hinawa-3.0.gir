<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <package name="hinawa"/>
  <c:include name="hinawa.h"/>
  <namespace name="Hinawa"
             version="3.0"
             shared-library="libhinawa.so.2"
             c:identifier-prefixes="Hinawa"
             c:symbol-prefixes="hinawa_">
    <record name="CycleTime"
            c:type="HinawaCycleTime"
            opaque="1"
            glib:type-name="HinawaCycleTime"
            glib:get-type="hinawa_cycle_time_get_type"
            c:symbol-prefix="cycle_time">
      <doc xml:space="preserve"
           filename="src/cycle_time.c"
           line="4">A boxed object to express data of cycle time.
A [struct@CycleTime] expresses the value of cycle time of 1394 OHCI as well as Linux system
time referring to clock_id.</doc>
      <source-position filename="src/cycle_time.h" line="11"/>
      <constructor name="new"
                   c:identifier="hinawa_cycle_time_new"
                   version="2.6.">
        <doc xml:space="preserve"
             filename="src/cycle_time.c"
             line="26">Allocate and return an instance of [struct@CycleTime].</doc>
        <source-position filename="src/cycle_time.h" line="15"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/cycle_time.c"
               line="31">An instance of [struct@CycleTime].</doc>
          <type name="CycleTime" c:type="HinawaCycleTime*"/>
        </return-value>
      </constructor>
      <method name="compute_tstamp"
              c:identifier="hinawa_cycle_time_compute_tstamp"
              version="2.6">
        <doc xml:space="preserve"
             filename="src/cycle_time.c"
             line="135">Compute second count and cycle count from unsigned 16 bit integer value retrieved by Asynchronous
Transmit (AT), Asynchronous Receive(AR), Isochronous Transmit (IT), and Isochronous Receive (IR)
contexts of 1394 OHCI. The second count is completed with the internal value read from the
CYCLE_TIME register. For the precise computation, the method should be called in the condition
that the timing between receipt of time stamp and access to CYCLE_TIME register is within 8
seconds.</doc>
        <source-position filename="src/cycle_time.h" line="26"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/cycle_time.c"
                 line="137">A [struct@CycleTime].</doc>
            <type name="CycleTime" c:type="const HinawaCycleTime*"/>
          </instance-parameter>
          <parameter name="tstamp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/cycle_time.c"
                 line="138">The value of time stamp retrieved from each context of 1394 OHCI.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="isoc_cycle"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/cycle_time.c"
                 line="139">The result to parse the time stamp. The
	first element is for 7 bits of second field in the format of IEEE 1394 CYCLE_TIME
	register, up to 127. The second element is for 13 bits of cycle field in the format,
	up to 7,999.</doc>
            <array zero-terminated="0" c:type="guint*" fixed-size="2">
              <type name="guint" c:type="guint"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_clock_id"
              c:identifier="hinawa_cycle_time_get_clock_id"
              version="2.6.">
        <doc xml:space="preserve"
             filename="src/cycle_time.c"
             line="57">Get the ID of clock for timestamp.</doc>
        <source-position filename="src/cycle_time.h" line="20"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/cycle_time.c"
                 line="59">A [struct@CycleTime].</doc>
            <type name="CycleTime" c:type="const HinawaCycleTime*"/>
          </instance-parameter>
          <parameter name="clock_id"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/cycle_time.c"
                 line="60">The numeric ID of clock source for the reference timestamp.
      One of CLOCK_REALTIME(0), CLOCK_MONOTONIC(1), and CLOCK_MONOTONIC_RAW(4) is available
      UAPI of Linux kernel.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_fields"
              c:identifier="hinawa_cycle_time_get_fields"
              version="2.6.">
        <doc xml:space="preserve"
             filename="src/cycle_time.c"
             line="94">Get the value of cycle time in 1394 OHCI controller. The first element of array expresses the
value of sec field, up to 127. The second element of array expresses the value of cycle field,
up to 7999. The third element of array expresses the value of offset field, up to 3071.</doc>
        <source-position filename="src/cycle_time.h" line="22"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/cycle_time.c"
                 line="96">A [struct@CycleTime].</doc>
            <type name="CycleTime" c:type="const HinawaCycleTime*"/>
          </instance-parameter>
          <parameter name="fields"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/cycle_time.c"
                 line="97">The value of cycle time register of 1394
    OHCI, including three elements; second, cycle, and offset in its order.</doc>
            <array zero-terminated="0" c:type="guint16*" fixed-size="3">
              <type name="guint16" c:type="guint16"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_raw"
              c:identifier="hinawa_cycle_time_get_raw"
              version="2.6.">
        <doc xml:space="preserve"
             filename="src/cycle_time.c"
             line="113">Get the value of cycle time in 1394 OHCI controller.</doc>
        <source-position filename="src/cycle_time.h" line="24"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/cycle_time.c"
                 line="115">A [struct@CycleTime].</doc>
            <type name="CycleTime" c:type="const HinawaCycleTime*"/>
          </instance-parameter>
          <parameter name="raw"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/cycle_time.c"
                 line="116">The raw value for CYCLE_TIME register.</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_system_time"
              c:identifier="hinawa_cycle_time_get_system_time"
              version="2.6.">
        <doc xml:space="preserve"
             filename="src/cycle_time.c"
             line="40">Get system time with enough size of strorage. The timestamp refers to clock_id available by
[method@CycleTime.get_clock_id].</doc>
        <source-position filename="src/cycle_time.h" line="17"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/cycle_time.c"
                 line="42">A [struct@CycleTime].</doc>
            <type name="CycleTime" c:type="const HinawaCycleTime*"/>
          </instance-parameter>
          <parameter name="tv_sec"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/cycle_time.c"
                 line="43">The second part of timestamp.</doc>
            <type name="gint64" c:type="gint64*"/>
          </parameter>
          <parameter name="tv_nsec"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/cycle_time.c"
                 line="44">The nanosecond part of timestamp.</doc>
            <type name="gint32" c:type="gint32*"/>
          </parameter>
        </parameters>
      </method>
      <function name="parse_tstamp"
                c:identifier="hinawa_cycle_time_parse_tstamp"
                version="2.6">
        <doc xml:space="preserve"
             filename="src/cycle_time.c"
             line="169">Parse second count and cycle count from unsigned 16 bit integer value retrieved by Asynchronous
Transmit (AT), Asynchronous Receive(AR), Isochronous Transmit (IT), and Isochronous Receive (IR)
contexts of 1394 OHCI.</doc>
        <source-position filename="src/cycle_time.h" line="28"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tstamp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/cycle_time.c"
                 line="171">The value of time stamp retrieved from each context of 1394 OHCI.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="isoc_cycle"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/cycle_time.c"
                 line="172">The result to parse the time stamp. The
	first element is for three order bits of second field in the format of IEEE 1394
	CYCLE_TIME register, up to 7. The second element is for 13 bits of cycle field in
	the format, up to 7,999.</doc>
            <array zero-terminated="0" c:type="guint*" fixed-size="2">
              <type name="guint" c:type="guint"/>
            </array>
          </parameter>
        </parameters>
      </function>
    </record>
    <class name="FwFcp"
           c:symbol-prefix="fw_fcp"
           c:type="HinawaFwFcp"
           parent="FwResp"
           glib:type-name="HinawaFwFcp"
           glib:get-type="hinawa_fw_fcp_get_type"
           glib:type-struct="FwFcpClass">
      <doc xml:space="preserve"
           filename="src/fw_fcp.c"
           line="7">A FCP transaction executor to node in IEEE 1394 bus.
A HinawaFwFcp supports Function Control Protocol (FCP) in IEC 61883-1, in which no way is defined
to match response against command by the contents of frames. In 'AV/C Digital Interface Command
Set General Specification Version 4.2' (Sep 1 2004, 1394TA), a pair of command and response is
loosely matched by the contents of frames.

Any of transaction frames should be aligned to 8bit (byte). This class is an application of
[class@FwReq] / [class@FwResp].</doc>
      <source-position filename="src/fw_fcp.h" line="47"/>
      <constructor name="new" c:identifier="hinawa_fw_fcp_new" version="1.3.">
        <doc xml:space="preserve"
             filename="src/fw_fcp.c"
             line="238">Instantiate [class@FwFcp] object and return the instance.</doc>
        <source-position filename="src/fw_fcp.h" line="49"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/fw_fcp.c"
               line="243">an instance of [class@FwFcp].</doc>
          <type name="FwFcp" c:type="HinawaFwFcp*"/>
        </return-value>
      </constructor>
      <virtual-method name="responded" version="2.1">
        <doc xml:space="preserve"
             filename="src/fw_fcp.h"
             line="20">Class closure for the [signal@FwFcp::responded] signal.</doc>
        <source-position filename="src/fw_fcp.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.h"
                 line="22">A [class@FwFcp].</doc>
            <type name="FwFcp" c:type="HinawaFwFcp*"/>
          </instance-parameter>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.h"
                 line="23">The array with elements for byte
   data of response for Function Control Protocol.</doc>
            <array length="1" zero-terminated="0" c:type="const guint8*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="frame_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.h"
                 line="25">The number of elements of the array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="responded2" version="2.6">
        <doc xml:space="preserve"
             filename="src/fw_fcp.h"
             line="33">Class closure for the [signal@FwFcp::responded2] signal.</doc>
        <source-position filename="src/fw_fcp.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.h"
                 line="35">A [class@FwFcp].</doc>
            <type name="FwFcp" c:type="HinawaFwFcp*"/>
          </instance-parameter>
          <parameter name="tstamp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.h"
                 line="36">The time stamp at which the request arrived for the response for FCP
    transaction.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.h"
                 line="38">The array with elements for byte
   data of response for Function Control Protocol.</doc>
            <array length="2" zero-terminated="0" c:type="const guint8*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="frame_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.h"
                 line="40">The number of elements of the array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="avc_transaction"
              c:identifier="hinawa_fw_fcp_avc_transaction"
              version="2.1."
              deprecated="1"
              deprecated-version="2.6"
              throws="1">
        <doc xml:space="preserve"
             filename="src/fw_fcp.c"
             line="438">Finish the pair of asynchronous transaction for AV/C command and response transactions. The
timeout_ms parameter is used to wait for response transaction since the command transaction is
initiated, ignoring [property@FwFcp:timeout] property of instance. The timeout is not expanded in
the case that AV/C INTERIM status is arrived, thus the caller should expand the timeout in
advance for the case.</doc>
        <doc-deprecated xml:space="preserve">Use [method@FwFcp.avc_transaction_with_tstamp], instead.</doc-deprecated>
        <source-position filename="src/fw_fcp.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="440">A [class@FwFcp].</doc>
            <type name="FwFcp" c:type="HinawaFwFcp*"/>
          </instance-parameter>
          <parameter name="cmd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="441">An array with elements for request byte data. The value of
 this argument should point to the array and immutable.</doc>
            <array length="1" zero-terminated="0" c:type="const guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="cmd_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="443">The size of array for request in byte unit.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="resp"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="444">An array with elements for response byte data. Callers
  should give it for buffer with enough space against the request since this library
  performs no reallocation. Due to the reason, the value of this argument should point to
  the pointer to the array and immutable. The content of array is mutable.</doc>
            <array length="3" zero-terminated="0" c:type="guint8* const*">
              <type name="guint8" c:type="guint8*"/>
            </array>
          </parameter>
          <parameter name="resp_size"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="448">The size of array for response in byte unit. The value of this argument should point to
       the numerical number and mutable.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="timeout_ms" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="450">The timeout to wait for response transaction since command transactions finishes.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="avc_transaction_with_tstamp"
              c:identifier="hinawa_fw_fcp_avc_transaction_with_tstamp"
              version="2.6."
              throws="1">
        <doc xml:space="preserve"
             filename="src/fw_fcp.c"
             line="474">Finish the pair of asynchronous transaction for AV/C command and response transactions. The
timeout_ms parameter is used to wait for response transaction since the command transaction is
initiated, ignoring [property@FwFcp:timeout] property of instance. The timeout is not expanded in
the case that AV/C INTERIM status is arrived, thus the caller should expand the timeout in
advance for the case.</doc>
        <source-position filename="src/fw_fcp.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/fw_fcp.c"
               line="501">TRUE if the overall operation finishes successfully, otherwise FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="476">A [class@FwFcp].</doc>
            <type name="FwFcp" c:type="HinawaFwFcp*"/>
          </instance-parameter>
          <parameter name="cmd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="477">An array with elements for request byte data. The value of
 this argument should point to the array and immutable.</doc>
            <array length="1" zero-terminated="0" c:type="const guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="cmd_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="479">The size of array for request in byte unit.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="resp"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="480">An array with elements for response byte data. Callers
  should give it for buffer with enough space against the request since this library
  performs no reallocation. Due to the reason, the value of this argument should point to
  the pointer to the array and immutable. The content of array is mutable.</doc>
            <array length="3" zero-terminated="0" c:type="guint8**">
              <type name="guint8" c:type="guint8*"/>
            </array>
          </parameter>
          <parameter name="resp_size"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="484">The size of array for response in byte unit. The value of this argument should point
       to the numerical number and mutable.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="tstamp"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="486">The array with three elements for time
    stamps. The first element is for the isochronous cycle at which the request was sent
    for the command of FCP transaction. The second element is for the isochronous cycle at
    which the response arrived for the command of FCP transaction. The third element is for
    the isochronous cycle at which the request was sent for the response of FCP transaction.</doc>
            <array zero-terminated="0" c:type="guint*" fixed-size="3">
              <type name="guint" c:type="guint"/>
            </array>
          </parameter>
          <parameter name="timeout_ms" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="491">The timeout to wait for response transaction since command transactions finishes.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="bind"
              c:identifier="hinawa_fw_fcp_bind"
              version="1.4"
              throws="1">
        <doc xml:space="preserve"
             filename="src/fw_fcp.c"
             line="581">Start to listen to FCP responses.</doc>
        <source-position filename="src/fw_fcp.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="583">A [class@FwFcp].</doc>
            <type name="FwFcp" c:type="HinawaFwFcp*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="584">A [class@FwNode].</doc>
            <type name="FwNode" c:type="HinawaFwNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="command"
              c:identifier="hinawa_fw_fcp_command"
              version="2.1."
              deprecated="1"
              deprecated-version="2.6"
              throws="1">
        <doc xml:space="preserve"
             filename="src/fw_fcp.c"
             line="279">Transfer command frame for FCP. When receiving response frame for FCP, [signal@FwFcp::responded]
signal is emitted.</doc>
        <doc-deprecated xml:space="preserve">Use [method@FwFcp.command_with_tstamp], instead.</doc-deprecated>
        <source-position filename="src/fw_fcp.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="281">A [class@FwFcp].</doc>
            <type name="FwFcp" c:type="HinawaFwFcp*"/>
          </instance-parameter>
          <parameter name="cmd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="282">An array with elements for request byte data. The value of this
 argument should point to the array and immutable.</doc>
            <array length="1" zero-terminated="0" c:type="const guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="cmd_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="284">The size of array for request in byte unit.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="timeout_ms" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="285">The timeout to wait for response subaction of transaction for command frame.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="command_with_tstamp"
              c:identifier="hinawa_fw_fcp_command_with_tstamp"
              version="2.6."
              throws="1">
        <doc xml:space="preserve"
             filename="src/fw_fcp.c"
             line="304">Transfer command frame for FCP. When receiving response frame for FCP, [signal@FwFcp::responded]
signal is emitted.

Each value of @tstamp is unsigned 16 bit integer including higher 3 bits for three low order bits
of second field and the rest 13 bits for cycle field in the format of IEEE 1394 CYCLE_TIMER register.

If the version of kernel ABI for Linux FireWire subsystem is less than 6, each element of @tstamp
has invalid value (=G_MAXUINT16).</doc>
        <source-position filename="src/fw_fcp.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/fw_fcp.c"
               line="326">TRUE if the overall operation finishes successfully, otherwise FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="306">A [class@FwFcp].</doc>
            <type name="FwFcp" c:type="HinawaFwFcp*"/>
          </instance-parameter>
          <parameter name="cmd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="307">An array with elements for request byte data. The value of this
 argument should point to the array and immutable.</doc>
            <array length="1" zero-terminated="0" c:type="const guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="cmd_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="309">The size of array for request in byte unit.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="tstamp"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="310">The array with two elements for time stamps.
    The first element is for the isochronous cycle at which the request arrived. The second
    element is for the isochronous cycle at which the response was sent.</doc>
            <array zero-terminated="0" c:type="guint*" fixed-size="2">
              <type name="guint" c:type="guint"/>
            </array>
          </parameter>
          <parameter name="timeout_ms" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="313">The timeout to wait for response subaction of transaction for command frame.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="transaction"
              c:identifier="hinawa_fw_fcp_transaction"
              version="1.4."
              deprecated="1"
              deprecated-version="2.1"
              throws="1">
        <doc xml:space="preserve"
             filename="src/fw_fcp.c"
             line="514">Finish the pair of command and response transactions for FCP. The value of
[property@FwFcp:timeout] property is used to wait for response transaction since the command
transaction is initiated.</doc>
        <doc-deprecated xml:space="preserve">Use [method@FwFcp.avc_transaction], instead.</doc-deprecated>
        <source-position filename="src/fw_fcp.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="516">A [class@FwFcp].</doc>
            <type name="FwFcp" c:type="HinawaFwFcp*"/>
          </instance-parameter>
          <parameter name="req_frame" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="517">An array with elements for request byte data. The
       value of this argument should point to the array and immutable.</doc>
            <array length="1" zero-terminated="0" c:type="const guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="req_frame_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="519">The size of array for request in byte unit.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="resp_frame"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="520">An array with elements for response byte
	data. Callers should give it for buffer with enough space against the request
	since this library performs no reallocation. Due to the reason, the value of this
	argument should point to the pointer to the array and immutable. The content of
	array is mutable.</doc>
            <array length="3" zero-terminated="0" c:type="guint8* const*">
              <type name="guint8" c:type="guint8*"/>
            </array>
          </parameter>
          <parameter name="resp_frame_size"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="525">The size of array for response in byte unit. The value of this argument should
	     point to the numerical number and mutable.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unbind" c:identifier="hinawa_fw_fcp_unbind" version="1.4.">
        <doc xml:space="preserve"
             filename="src/fw_fcp.c"
             line="611">Stop to listen to FCP responses.</doc>
        <source-position filename="src/fw_fcp.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="613">A [class@FwFcp].</doc>
            <type name="FwFcp" c:type="HinawaFwFcp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="is-bound"
                version="2.0"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/fw_fcp.c"
             line="159">Whether this protocol is bound to any instance of HinawaFwNode.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="timeout"
                deprecated="1"
                deprecated-version="2.1"
                writable="1"
                construct="1"
                transfer-ownership="none"
                default-value="200">
        <doc xml:space="preserve"
             filename="src/fw_fcp.c"
             line="145">Since 1.4</doc>
        <doc-deprecated xml:space="preserve">Use timeout_ms parameter of [method@FwFcp.avc_transaction].</doc-deprecated>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance">
        <type name="FwResp" c:type="HinawaFwResp"/>
      </field>
      <glib:signal name="responded"
                   when="last"
                   version="2.1"
                   deprecated="1"
                   deprecated-version="2.6">
        <doc xml:space="preserve"
             filename="src/fw_fcp.c"
             line="177">Emitted when the node transfers asynchronous packet as response for FCP and the process
successfully read the content of packet, except for the case that
[signal@FwFcp::responded2] signal handler is already assigned.</doc>
        <doc-deprecated xml:space="preserve">Use [signal@FwFcp::responded2], instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="180">The array with elements for byte
   data of response for FCP.</doc>
            <array length="1" zero-terminated="0" c:type="gpointer">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="frame_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="182">The number of elements of the array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="responded2" when="last" version="2.6.">
        <doc xml:space="preserve"
             filename="src/fw_fcp.c"
             line="201">Emitted when the node transfers asynchronous packet as response for FCP and the process
successfully read the content of packet.

The values of @tstamp is unsigned 16 bit integer including higher 3 bits for three low
order bits of second field and the rest 13 bits for cycle field in the format of IEEE
1394 CYCLE_TIMER register.

If the version of kernel ABI for Linux FireWire subsystem is less than 6, the value of
@tstamp argument has invalid value (=G_MAXUINT).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tstamp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="204">The time stamp at which the request arrived for the response of FCP
    transaction.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="206">The array with elements for byte
   data of response for FCP.</doc>
            <array length="2" zero-terminated="0" c:type="gpointer">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="frame_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_fcp.c"
                 line="208">The number of elements of the array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="FwFcpClass"
            c:type="HinawaFwFcpClass"
            glib:is-gtype-struct-for="FwFcp">
      <source-position filename="src/fw_fcp.h" line="47"/>
      <field name="parent_class">
        <type name="FwRespClass" c:type="HinawaFwRespClass"/>
      </field>
      <field name="responded">
        <callback name="responded">
          <source-position filename="src/fw_fcp.h" line="31"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_fcp.h"
                   line="22">A [class@FwFcp].</doc>
              <type name="FwFcp" c:type="HinawaFwFcp*"/>
            </parameter>
            <parameter name="frame" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_fcp.h"
                   line="23">The array with elements for byte
   data of response for Function Control Protocol.</doc>
              <array length="2" zero-terminated="0" c:type="const guint8*">
                <type name="guint8"/>
              </array>
            </parameter>
            <parameter name="frame_size" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_fcp.h"
                   line="25">The number of elements of the array.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="responded2">
        <callback name="responded2">
          <source-position filename="src/fw_fcp.h" line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_fcp.h"
                   line="35">A [class@FwFcp].</doc>
              <type name="FwFcp" c:type="HinawaFwFcp*"/>
            </parameter>
            <parameter name="tstamp" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_fcp.h"
                   line="36">The time stamp at which the request arrived for the response for FCP
    transaction.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="frame" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_fcp.h"
                   line="38">The array with elements for byte
   data of response for Function Control Protocol.</doc>
              <array length="3" zero-terminated="0" c:type="const guint8*">
                <type name="guint8"/>
              </array>
            </parameter>
            <parameter name="frame_size" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_fcp.h"
                   line="40">The number of elements of the array.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="FwFcpError"
                 version="2.1"
                 glib:type-name="HinawaFwFcpError"
                 glib:get-type="hinawa_fw_fcp_error_get_type"
                 c:type="HinawaFwFcpError"
                 glib:error-domain="hinawa-fw-fcp-error-quark">
      <doc xml:space="preserve"
           filename="src/hinawa_enum_types.h"
           line="179">A set of error code for [struct@GLib.Error] with domain which equals to Hinawa.FwFcpError.</doc>
      <member name="timeout"
              value="0"
              c:identifier="HINAWA_FW_FCP_ERROR_TIMEOUT"
              glib:nick="timeout"
              glib:name="HINAWA_FW_FCP_ERROR_TIMEOUT">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="181">The transaction is canceled due to response timeout.</doc>
      </member>
      <member name="large_resp"
              value="1"
              c:identifier="HINAWA_FW_FCP_ERROR_LARGE_RESP"
              glib:nick="large-resp"
              glib:name="HINAWA_FW_FCP_ERROR_LARGE_RESP">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="182">The size of response is larger than expected.</doc>
      </member>
      <function name="quark"
                c:identifier="hinawa_fw_fcp_error_quark"
                version="2.1">
        <doc xml:space="preserve"
             filename="src/fw_fcp.c"
             line="20">Return the [alias@GLib.Quark] for [struct@GLib.Error] which has code in Hinawa.FwFcpError.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/fw_fcp.c"
               line="27">A [alias@GLib.Quark].</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="FwNode"
           c:symbol-prefix="fw_node"
           c:type="HinawaFwNode"
           version="1.4."
           parent="GObject.Object"
           glib:type-name="HinawaFwNode"
           glib:get-type="hinawa_fw_node_get_type"
           glib:type-struct="FwNodeClass">
      <doc xml:space="preserve"
           filename="src/fw_node.c"
           line="11">An event listener for FireWire node
A [class@FwNode] is an event listener for a specified node on IEEE 1394 bus. This class is an
application of Linux FireWire subsystem. All of operations utilize ioctl(2) with subsystem
specific request commands.</doc>
      <source-position filename="src/fw_node.h" line="40"/>
      <constructor name="new" c:identifier="hinawa_fw_node_new" version="1.4.">
        <doc xml:space="preserve"
             filename="src/fw_node.c"
             line="288">Instantiate [class@FwNode] object and return the instance.</doc>
        <source-position filename="src/fw_node.h" line="42"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/fw_node.c"
               line="293">an instance of [class@FwNode].</doc>
          <type name="FwNode" c:type="HinawaFwNode*"/>
        </return-value>
      </constructor>
      <virtual-method name="bus_update" version="1.4.">
        <doc xml:space="preserve"
             filename="src/fw_node.h"
             line="20">Class closure for the [signal@FwNode::bus-update].</doc>
        <source-position filename="src/fw_node.h" line="28"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_node.h"
                 line="22">A [class@FwNode].</doc>
            <type name="FwNode" c:type="HinawaFwNode*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="disconnected" version="1.4.">
        <doc xml:space="preserve"
             filename="src/fw_node.h"
             line="30">Class closure for the [signal@FwNode::disconnected].</doc>
        <source-position filename="src/fw_node.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_node.h"
                 line="32">A [class@FwNode]</doc>
            <type name="FwNode" c:type="HinawaFwNode*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="create_source"
              c:identifier="hinawa_fw_node_create_source"
              version="1.4."
              throws="1">
        <doc xml:space="preserve"
             filename="src/fw_node.c"
             line="563">Create [struct@GLib.Source] for [struct@GLib.MainContext] to dispatch events for the node on
IEEE 1394 bus.</doc>
        <source-position filename="src/fw_node.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_node.c"
                 line="565">A [class@FwNode].</doc>
            <type name="FwNode" c:type="HinawaFwNode*"/>
          </instance-parameter>
          <parameter name="gsrc"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/fw_node.c"
                 line="566">A [struct@GLib.Source].</doc>
            <type name="GLib.Source" c:type="GSource**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_config_rom"
              c:identifier="hinawa_fw_node_get_config_rom"
              version="1.4."
              throws="1">
        <doc xml:space="preserve"
             filename="src/fw_node.c"
             line="387">Get cached content of configuration ROM aligned to big-endian.</doc>
        <source-position filename="src/fw_node.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_node.c"
                 line="389">A [class@FwNode]</doc>
            <type name="FwNode" c:type="HinawaFwNode*"/>
          </instance-parameter>
          <parameter name="image"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_node.c"
                 line="390">The content of configuration ROM.</doc>
            <array length="1" zero-terminated="0" c:type="const guint8**">
              <type name="guint8" c:type="guint8*"/>
            </array>
          </parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/fw_node.c"
                 line="391">The number of bytes consists of the configuration rom.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open"
              c:identifier="hinawa_fw_node_open"
              version="1.4."
              throws="1">
        <doc xml:space="preserve"
             filename="src/fw_node.c"
             line="332">Open Linux FireWire character device to operate node on IEEE 1394 bus.</doc>
        <source-position filename="src/fw_node.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_node.c"
                 line="334">A [class@FwNode]</doc>
            <type name="FwNode" c:type="HinawaFwNode*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_node.c"
                 line="335">A path to Linux FireWire character device</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="read_cycle_time"
              c:identifier="hinawa_fw_node_read_cycle_time"
              version="2.6."
              throws="1">
        <doc xml:space="preserve"
             filename="src/fw_node.c"
             line="423">Read current value of CYCLE_TIME register in 1394 OHCI controller.</doc>
        <source-position filename="src/fw_node.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/fw_node.c"
               line="433">TRUE if the overall operation finishes successfully, otherwise FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_node.c"
                 line="425">A [class@FwNode]</doc>
            <type name="FwNode" c:type="HinawaFwNode*"/>
          </instance-parameter>
          <parameter name="clock_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_node.c"
                 line="426">The numeric ID of clock source for the reference timestamp. One of CLOCK_REALTIME(0),
      CLOCK_MONOTONIC(1), and CLOCK_MONOTONIC_RAW(4) is available in UAPI of Linux kernel.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cycle_time"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/fw_node.c"
                 line="428">A [struct@CycleTime].</doc>
            <type name="CycleTime" c:type="HinawaCycleTime* const*"/>
          </parameter>
        </parameters>
      </method>
      <property name="bus-manager-node-id"
                version="1.4"
                transfer-ownership="none"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/fw_node.c"
             line="182">Node ID of node which plays role of bus manager at current generation of bus topology.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="generation"
                version="1.4"
                transfer-ownership="none"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/fw_node.c"
             line="225">Current generation of bus topology.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="ir-manager-node-id"
                version="1.4"
                transfer-ownership="none"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/fw_node.c"
             line="196">Node ID of node which plays role of isochronous resource manager at current generation
of bus topology.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="local-node-id"
                version="1.4"
                transfer-ownership="none"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/fw_node.c"
             line="166">Node ID of node which application uses to communicate to node associated to instance of
object at current generation of bus topology. In general, it is for 1394 OHCI controller.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="node-id"
                version="1.4"
                transfer-ownership="none"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/fw_node.c"
             line="150">Node ID of node associated to instance of object at current generation of bus topology.
This parameter is effective after the association.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="root-node-id"
                version="1.4"
                transfer-ownership="none"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/fw_node.c"
             line="211">Node ID of root node in bus topology at current generation of the bus topology.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="bus-update" when="last" version="1.4">
        <doc xml:space="preserve"
             filename="src/fw_node.c"
             line="242">Emitted when IEEE 1394 bus is updated. Handlers can read current generation in the bus
via [property@FwNode:generation] property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="disconnected" when="last" version="1.4">
        <doc xml:space="preserve"
             filename="src/fw_node.c"
             line="260">Emitted when the node is not available anymore due to removal from IEEE 1394 bus. It's
preferable to call [method@GObject.Object.unref] immediately to release file descriptor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="FwNodeClass"
            c:type="HinawaFwNodeClass"
            glib:is-gtype-struct-for="FwNode">
      <source-position filename="src/fw_node.h" line="40"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="bus_update">
        <callback name="bus_update">
          <source-position filename="src/fw_node.h" line="28"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_node.h"
                   line="22">A [class@FwNode].</doc>
              <type name="FwNode" c:type="HinawaFwNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="disconnected">
        <callback name="disconnected">
          <source-position filename="src/fw_node.h" line="38"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_node.h"
                   line="32">A [class@FwNode]</doc>
              <type name="FwNode" c:type="HinawaFwNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="FwNodeError"
                 version="2.1"
                 glib:type-name="HinawaFwNodeError"
                 glib:get-type="hinawa_fw_node_error_get_type"
                 c:type="HinawaFwNodeError"
                 glib:error-domain="hinawa-fw-node-error-quark">
      <doc xml:space="preserve"
           filename="src/hinawa_enum_types.h"
           line="143">A set of error code for [struct@GLib.Error] with domain which equals to Hinawa.FwNodeError.</doc>
      <member name="disconnected"
              value="0"
              c:identifier="HINAWA_FW_NODE_ERROR_DISCONNECTED"
              glib:nick="disconnected"
              glib:name="HINAWA_FW_NODE_ERROR_DISCONNECTED">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="145">The node associated to the instance is disconnected.</doc>
      </member>
      <member name="opened"
              value="1"
              c:identifier="HINAWA_FW_NODE_ERROR_OPENED"
              glib:nick="opened"
              glib:name="HINAWA_FW_NODE_ERROR_OPENED">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="146">The instance is already associated to node by opening
				firewire character device.</doc>
      </member>
      <member name="not_opened"
              value="2"
              c:identifier="HINAWA_FW_NODE_ERROR_NOT_OPENED"
              glib:nick="not-opened"
              glib:name="HINAWA_FW_NODE_ERROR_NOT_OPENED">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="148">The instance is not associated to node by opening
				firewire character device.</doc>
      </member>
      <member name="failed"
              value="3"
              c:identifier="HINAWA_FW_NODE_ERROR_FAILED"
              glib:nick="failed"
              glib:name="HINAWA_FW_NODE_ERROR_FAILED">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="150">The system call fails.</doc>
      </member>
      <function name="quark"
                c:identifier="hinawa_fw_node_error_quark"
                version="2.1">
        <doc xml:space="preserve"
             filename="src/fw_node.c"
             line="41">Return the [alias@GLib.Quark] for [struct@GLib.Error] with Hinawa.FwNodeError domain.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/fw_node.c"
               line="48">A [alias@GLib.Quark].</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <enumeration name="FwRcode"
                 version="1.0"
                 glib:type-name="HinawaFwRcode"
                 glib:get-type="hinawa_fw_rcode_get_type"
                 c:type="HinawaFwRcode">
      <doc xml:space="preserve"
           filename="src/hinawa_enum_types.h"
           line="53">A representation for rcode of asynchronous transaction on IEEE 1394 bus.</doc>
      <member name="complete"
              value="0"
              c:identifier="HINAWA_FW_RCODE_COMPLETE"
              glib:nick="complete"
              glib:name="HINAWA_FW_RCODE_COMPLETE">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="55">For completion.</doc>
      </member>
      <member name="conflict_error"
              value="4"
              c:identifier="HINAWA_FW_RCODE_CONFLICT_ERROR"
              glib:nick="conflict-error"
              glib:name="HINAWA_FW_RCODE_CONFLICT_ERROR">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="56">For error of conflicting.</doc>
      </member>
      <member name="data_error"
              value="5"
              c:identifier="HINAWA_FW_RCODE_DATA_ERROR"
              glib:nick="data-error"
              glib:name="HINAWA_FW_RCODE_DATA_ERROR">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="57">For error of data.</doc>
      </member>
      <member name="type_error"
              value="6"
              c:identifier="HINAWA_FW_RCODE_TYPE_ERROR"
              glib:nick="type-error"
              glib:name="HINAWA_FW_RCODE_TYPE_ERROR">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="58">For error of type.</doc>
      </member>
      <member name="address_error"
              value="7"
              c:identifier="HINAWA_FW_RCODE_ADDRESS_ERROR"
              glib:nick="address-error"
              glib:name="HINAWA_FW_RCODE_ADDRESS_ERROR">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="59">For error of address.</doc>
      </member>
      <member name="send_error"
              value="16"
              c:identifier="HINAWA_FW_RCODE_SEND_ERROR"
              glib:nick="send-error"
              glib:name="HINAWA_FW_RCODE_SEND_ERROR">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="60">For error of sending.</doc>
      </member>
      <member name="cancelled"
              value="17"
              c:identifier="HINAWA_FW_RCODE_CANCELLED"
              glib:nick="cancelled"
              glib:name="HINAWA_FW_RCODE_CANCELLED">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="61">For cancellation.</doc>
      </member>
      <member name="busy"
              value="18"
              c:identifier="HINAWA_FW_RCODE_BUSY"
              glib:nick="busy"
              glib:name="HINAWA_FW_RCODE_BUSY">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="62">For busyness.</doc>
      </member>
      <member name="generation"
              value="19"
              c:identifier="HINAWA_FW_RCODE_GENERATION"
              glib:nick="generation"
              glib:name="HINAWA_FW_RCODE_GENERATION">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="63">For generation.</doc>
      </member>
      <member name="no_ack"
              value="20"
              c:identifier="HINAWA_FW_RCODE_NO_ACK"
              glib:nick="no-ack"
              glib:name="HINAWA_FW_RCODE_NO_ACK">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="64">For no acknowledge.</doc>
      </member>
      <member name="invalid"
              value="21"
              c:identifier="HINAWA_FW_RCODE_INVALID"
              glib:nick="invalid"
              glib:name="HINAWA_FW_RCODE_INVALID">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="65">For rcode out of specification.</doc>
      </member>
    </enumeration>
    <class name="FwReq"
           c:symbol-prefix="fw_req"
           c:type="HinawaFwReq"
           parent="GObject.Object"
           glib:type-name="HinawaFwReq"
           glib:get-type="hinawa_fw_req_get_type"
           glib:type-struct="FwReqClass">
      <doc xml:space="preserve"
           filename="src/fw_req.c"
           line="8">A transaction executor to a FireWire unit.
A HinawaFwReq supports some types of transactions in IEEE 1212. Mainly for read, write and lock
operations.

This class is an application of Linux FireWire subsystem. All of operations utilize ioctl(2)
with subsystem specific request commands.</doc>
      <source-position filename="src/fw_req.h" line="52"/>
      <constructor name="new" c:identifier="hinawa_fw_req_new" version="1.3.">
        <doc xml:space="preserve"
             filename="src/fw_req.c"
             line="195">Instantiate [class@FwReq] object and return the instance.</doc>
        <source-position filename="src/fw_req.h" line="54"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/fw_req.c"
               line="200">an instance of [class@FwReq].</doc>
          <type name="FwReq" c:type="HinawaFwReq*"/>
        </return-value>
      </constructor>
      <virtual-method name="responded"
                      version="2.1"
                      deprecated="1"
                      deprecated-version="2.6">
        <doc xml:space="preserve"
             filename="src/fw_req.h"
             line="20">Class closure for the [signal@FwReq::responded] signal.</doc>
        <doc-deprecated xml:space="preserve">Use [vfunc@FwReq.responded2], instead.</doc-deprecated>
        <source-position filename="src/fw_req.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.h"
                 line="22">A [class@FwReq].</doc>
            <type name="FwReq" c:type="HinawaFwReq*"/>
          </instance-parameter>
          <parameter name="rcode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.h"
                 line="23">One of [enum@FwRcode].</doc>
            <type name="FwRcode" c:type="HinawaFwRcode"/>
          </parameter>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.h"
                 line="24">The array with elements for
   byte data of response subaction for transaction.</doc>
            <array length="2" zero-terminated="0" c:type="const guint8*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="frame_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.h"
                 line="26">The number of elements of the array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="responded2" version="2.6">
        <doc xml:space="preserve"
             filename="src/fw_req.h"
             line="36">Class closure for the [signal@FwReq::responded2] signal.</doc>
        <source-position filename="src/fw_req.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.h"
                 line="38">A [class@FwReq].</doc>
            <type name="FwReq" c:type="HinawaFwReq*"/>
          </instance-parameter>
          <parameter name="rcode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.h"
                 line="39">One of [enum@FwRcode].</doc>
            <type name="FwRcode" c:type="HinawaFwRcode"/>
          </parameter>
          <parameter name="request_tstamp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.h"
                 line="40">The isochronous cycle at which the request was sent.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="response_tstamp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.h"
                 line="41">The isochronous cycle at which the response arrived.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.h"
                 line="42">The array with elements for
   byte data of response subaction for transaction.</doc>
            <array length="4" zero-terminated="0" c:type="const guint8*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="frame_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.h"
                 line="44">The number of elements of the array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="request"
              c:identifier="hinawa_fw_req_request"
              version="2.6."
              throws="1">
        <doc xml:space="preserve"
             filename="src/fw_req.c"
             line="276">Execute request subaction of transactions to the given node according to given code. When the
response subaction arrives and running event dispatcher reads the contents,
[signal@FwReq::responded2] signal handler is called.</doc>
        <source-position filename="src/fw_req.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="278">A [class@FwReq].</doc>
            <type name="FwReq" c:type="HinawaFwReq*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="279">A [class@FwNode].</doc>
            <type name="FwNode" c:type="HinawaFwNode*"/>
          </parameter>
          <parameter name="tcode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="280">A transaction code of [enum@FwTcode].</doc>
            <type name="FwTcode" c:type="HinawaFwTcode"/>
          </parameter>
          <parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="281">A destination address of target device</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="282">The range of address in byte unit.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="frame"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="283">An array with elements for byte data. Callers should
   give it for buffer with enough space against the request since this library performs no
   reallocation. Due to the reason, the value of this argument should point to the pointer
   to the array and immutable. The content of array is mutable for read and lock
   transaction.</doc>
            <array length="5" zero-terminated="0" c:type="guint8* const*">
              <type name="guint8" c:type="guint8*"/>
            </array>
          </parameter>
          <parameter name="frame_size"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="288">The size of array in byte unit. The value of this argument should point to the
	numerical number and mutable for read and lock transaction.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="transaction"
              c:identifier="hinawa_fw_req_transaction"
              version="1.4"
              deprecated="1"
              deprecated-version="2.1"
              throws="1">
        <doc xml:space="preserve"
             filename="src/fw_req.c"
             line="535">Execute request subaction of transaction to the given node according to given code, then wait
for response subaction within the value of timeout argument.</doc>
        <doc-deprecated xml:space="preserve">Use [method@FwReq.transaction_with_tstamp()] instead.</doc-deprecated>
        <source-position filename="src/fw_req.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="537">A [class@FwReq].</doc>
            <type name="FwReq" c:type="HinawaFwReq*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="538">A [class@FwNode].</doc>
            <type name="FwNode" c:type="HinawaFwNode*"/>
          </parameter>
          <parameter name="tcode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="539">A transaction code of [enum@FwTcode].</doc>
            <type name="FwTcode" c:type="HinawaFwTcode"/>
          </parameter>
          <parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="540">A destination address of target device</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="541">The range of address in byte unit.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="frame"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="542">An array with elements for byte data. Callers should
   give it for buffer with enough space against the request since this library performs no
   reallocation. Due to the reason, the value of this argument should point to the pointer
   to the array and immutable. The content of array is mutable for read and lock
   transaction.</doc>
            <array length="5" zero-terminated="0" c:type="guint8* const*">
              <type name="guint8" c:type="guint8*"/>
            </array>
          </parameter>
          <parameter name="frame_size"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="547">The size of array in byte unit. The value of this argument should point to the
	numerical number and mutable for read and lock transaction.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="transaction_async"
              c:identifier="hinawa_fw_req_transaction_async"
              version="2.1."
              deprecated="1"
              deprecated-version="2.6"
              throws="1">
        <doc xml:space="preserve"
             filename="src/fw_req.c"
             line="306">Execute request subaction of transactions to the given node according to given code. When the
response subaction arrives and read the contents, [signal@FwReq::responded2] signal handler is called
as long as event dispatcher runs.</doc>
        <doc-deprecated xml:space="preserve">Use [method@FwReq.request] instead.</doc-deprecated>
        <source-position filename="src/fw_req.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="308">A [class@FwReq].</doc>
            <type name="FwReq" c:type="HinawaFwReq*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="309">A [class@FwNode].</doc>
            <type name="FwNode" c:type="HinawaFwNode*"/>
          </parameter>
          <parameter name="tcode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="310">A transaction code of [enum@FwTcode].</doc>
            <type name="FwTcode" c:type="HinawaFwTcode"/>
          </parameter>
          <parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="311">A destination address of target device</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="312">The range of address in byte unit.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="frame"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="313">An array with elements for byte data. Callers should
   give it for buffer with enough space against the request since this library performs no
   reallocation. Due to the reason, the value of this argument should point to the pointer
   to the array and immutable. The content of array is mutable for read and lock
   transaction.</doc>
            <array length="5" zero-terminated="0" c:type="guint8* const*">
              <type name="guint8" c:type="guint8*"/>
            </array>
          </parameter>
          <parameter name="frame_size"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="318">The size of array in byte unit. The value of this argument should point to the
	numerical number and mutable for read and lock transaction.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="transaction_sync"
              c:identifier="hinawa_fw_req_transaction_sync"
              version="2.1."
              deprecated="1"
              deprecated-version="2.6."
              throws="1">
        <doc xml:space="preserve"
             filename="src/fw_req.c"
             line="443">Execute request subaction of transaction to the given node according to given code, then wait
for response subaction within the given timeout. The [property@FwReq:timeout] property of
instance is ignored.</doc>
        <doc-deprecated xml:space="preserve">Use [method@FwReq.transaction_with_tstamp] instead.</doc-deprecated>
        <source-position filename="src/fw_req.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="445">A [class@FwReq].</doc>
            <type name="FwReq" c:type="HinawaFwReq*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="446">A [class@FwNode].</doc>
            <type name="FwNode" c:type="HinawaFwNode*"/>
          </parameter>
          <parameter name="tcode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="447">A transaction code of [enum@FwTcode].</doc>
            <type name="FwTcode" c:type="HinawaFwTcode"/>
          </parameter>
          <parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="448">A destination address of target device</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="449">The range of address in byte unit.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="frame"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="450">An array with elements for byte data. Callers should
   give it for buffer with enough space against the request since this library performs no
   reallocation. Due to the reason, the value of this argument should point to the pointer
   to the array and immutable. The content of array is mutable for read and lock
   transaction.</doc>
            <array length="5" zero-terminated="0" c:type="guint8* const*">
              <type name="guint8" c:type="guint8*"/>
            </array>
          </parameter>
          <parameter name="frame_size"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="455">The size of array in byte unit. The value of this argument should point to the
	numeric number and mutable for read and lock transaction.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="timeout_ms" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="457">The timeout to wait for response subaction of the transaction since request
	subaction is initiated, in milliseconds.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="transaction_with_tstamp"
              c:identifier="hinawa_fw_req_transaction_with_tstamp"
              version="2.6"
              throws="1">
        <doc xml:space="preserve"
             filename="src/fw_req.c"
             line="480">Execute request subaction of transaction to the given node according to given code, then wait
for response subaction within the given timeout. The [property@FwReq:timeout] property of
instance is ignored.

Each value of @tstamp is unsigned 16 bit integer including higher 3 bits for three low order bits
of second field and the rest 13 bits for cycle field in the format of IEEE 1394 CYCLE_TIMER register.

If the version of kernel ABI for Linux FireWire subsystem is less than 6, each element of @tstamp
has invalid value (=G_MAXUINT).</doc>
        <source-position filename="src/fw_req.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/fw_req.c"
               line="512">TRUE if the overall operation finishes successfully, otherwise FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="482">A [class@FwReq].</doc>
            <type name="FwReq" c:type="HinawaFwReq*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="483">A [class@FwNode].</doc>
            <type name="FwNode" c:type="HinawaFwNode*"/>
          </parameter>
          <parameter name="tcode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="484">A transaction code of [enum@FwTcode].</doc>
            <type name="FwTcode" c:type="HinawaFwTcode"/>
          </parameter>
          <parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="485">A destination address of target device</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="486">The range of address in byte unit.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="frame"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="487">An array with elements for byte data. Callers should
   give it for buffer with enough space against the request since this library performs no
   reallocation. Due to the reason, the value of this argument should point to the pointer
   to the array and immutable. The content of array is mutable for read and lock
   transaction.</doc>
            <array length="5" zero-terminated="0" c:type="guint8**">
              <type name="guint8" c:type="guint8*"/>
            </array>
          </parameter>
          <parameter name="frame_size"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="492">The size of array in byte unit. The value of this argument should point to the
	numeric number and mutable for read and lock transaction.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="tstamp"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="494">The array with two elements for time stamps.
    The first element is for the isochronous cycle at which the request was sent. The second
    element is for the isochronous cycle at which the response arrived.</doc>
            <array zero-terminated="0" c:type="guint*" fixed-size="2">
              <type name="guint" c:type="guint"/>
            </array>
          </parameter>
          <parameter name="timeout_ms" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="497">The timeout to wait for response subaction of the transaction since request
	subaction is initiated, in milliseconds.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="timeout"
                version="1.4"
                deprecated="1"
                deprecated-version="2.1"
                writable="1"
                construct="1"
                transfer-ownership="none"
                default-value="200">
        <doc-deprecated xml:space="preserve">Use timeout_ms parameter of [method@FwReq.transaction_with_tstamp].</doc-deprecated>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="responded"
                   when="last"
                   version="2.1"
                   deprecated="1"
                   deprecated-version="2.6">
        <doc xml:space="preserve"
             filename="src/fw_req.c"
             line="129">Emitted when the unit transfers asynchronous packet as response subaction for the
transaction and the process successfully reads the content of packet from Linux firewire
subsystem, except for the case that [signal@FwReq::responded2] signal handler is already
assigned.</doc>
        <doc-deprecated xml:space="preserve">Use [signal@FwReq::responded2], instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="rcode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="132">One of [enum@FwRcode].</doc>
            <type name="FwRcode"/>
          </parameter>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="133">The array with elements for
   byte data of response subaction for transaction.</doc>
            <array length="2" zero-terminated="0" c:type="gpointer">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="frame_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="135">The number of elements of the array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="responded2" when="last" version="2.6">
        <doc xml:space="preserve"
             filename="src/fw_req.c"
             line="155">Emitted when the unit transfers asynchronous packet as response subaction for the
transaction and the process successfully reads the content of packet from Linux firewire
subsystem.

The values of @request_tstamp and @response_tstamp are unsigned 16 bit integer including
higher 3 bits for three low order bits of second field and the rest 13 bits for cycle
field in the format of IEEE 1394 CYCLE_TIMER register.

If the version of kernel ABI for Linux FireWire subsystem is less than 6, the
@request_tstamp and @response_tstamp argument has invalid value (=G_MAXUINT).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="rcode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="158">One of [enum@FwRcode].</doc>
            <type name="FwRcode"/>
          </parameter>
          <parameter name="request_tstamp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="159">The isochronous cycle at which the request was sent.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="response_tstamp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="160">The isochronous cycle at which the response arrived.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="161">The array with elements for
   byte data of response subaction for transaction.</doc>
            <array length="4" zero-terminated="0" c:type="gpointer">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="frame_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_req.c"
                 line="163">The number of elements of the array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="FwReqClass"
            c:type="HinawaFwReqClass"
            glib:is-gtype-struct-for="FwReq">
      <source-position filename="src/fw_req.h" line="52"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="responded">
        <callback name="responded">
          <source-position filename="src/fw_req.h" line="33"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_req.h"
                   line="22">A [class@FwReq].</doc>
              <type name="FwReq" c:type="HinawaFwReq*"/>
            </parameter>
            <parameter name="rcode" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_req.h"
                   line="23">One of [enum@FwRcode].</doc>
              <type name="FwRcode" c:type="HinawaFwRcode"/>
            </parameter>
            <parameter name="frame" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_req.h"
                   line="24">The array with elements for
   byte data of response subaction for transaction.</doc>
              <array length="3" zero-terminated="0" c:type="const guint8*">
                <type name="guint8"/>
              </array>
            </parameter>
            <parameter name="frame_size" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_req.h"
                   line="26">The number of elements of the array.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="responded2">
        <callback name="responded2">
          <source-position filename="src/fw_req.h" line="50"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_req.h"
                   line="38">A [class@FwReq].</doc>
              <type name="FwReq" c:type="HinawaFwReq*"/>
            </parameter>
            <parameter name="rcode" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_req.h"
                   line="39">One of [enum@FwRcode].</doc>
              <type name="FwRcode" c:type="HinawaFwRcode"/>
            </parameter>
            <parameter name="request_tstamp" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_req.h"
                   line="40">The isochronous cycle at which the request was sent.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="response_tstamp" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_req.h"
                   line="41">The isochronous cycle at which the response arrived.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="frame" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_req.h"
                   line="42">The array with elements for
   byte data of response subaction for transaction.</doc>
              <array length="5" zero-terminated="0" c:type="const guint8*">
                <type name="guint8"/>
              </array>
            </parameter>
            <parameter name="frame_size" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_req.h"
                   line="44">The number of elements of the array.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="FwReqError"
                 version="2.5."
                 glib:type-name="HinawaFwReqError"
                 glib:get-type="hinawa_fw_req_error_get_type"
                 c:type="HinawaFwReqError"
                 glib:error-domain="hinawa-fw-req-error-quark">
      <doc xml:space="preserve"
           filename="src/hinawa_enum_types.h"
           line="85">A set of error code for [class@Hinawa.FwReq]. Each of them has the same value as the
corresponding enumeration in [enum@Hinawa.FwRcode].</doc>
      <member name="conflict_error"
              value="4"
              c:identifier="HINAWA_FW_REQ_ERROR_CONFLICT_ERROR"
              glib:nick="conflict-error"
              glib:name="HINAWA_FW_REQ_ERROR_CONFLICT_ERROR">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="87">For error of conflicting.</doc>
      </member>
      <member name="data_error"
              value="5"
              c:identifier="HINAWA_FW_REQ_ERROR_DATA_ERROR"
              glib:nick="data-error"
              glib:name="HINAWA_FW_REQ_ERROR_DATA_ERROR">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="88">For error of data.</doc>
      </member>
      <member name="type_error"
              value="6"
              c:identifier="HINAWA_FW_REQ_ERROR_TYPE_ERROR"
              glib:nick="type-error"
              glib:name="HINAWA_FW_REQ_ERROR_TYPE_ERROR">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="89">For error of type.</doc>
      </member>
      <member name="address_error"
              value="7"
              c:identifier="HINAWA_FW_REQ_ERROR_ADDRESS_ERROR"
              glib:nick="address-error"
              glib:name="HINAWA_FW_REQ_ERROR_ADDRESS_ERROR">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="90">For error of address.</doc>
      </member>
      <member name="send_error"
              value="16"
              c:identifier="HINAWA_FW_REQ_ERROR_SEND_ERROR"
              glib:nick="send-error"
              glib:name="HINAWA_FW_REQ_ERROR_SEND_ERROR">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="91">For error of sending.</doc>
      </member>
      <member name="cancelled"
              value="17"
              c:identifier="HINAWA_FW_REQ_ERROR_CANCELLED"
              glib:nick="cancelled"
              glib:name="HINAWA_FW_REQ_ERROR_CANCELLED">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="92">For cancellation.</doc>
      </member>
      <member name="busy"
              value="18"
              c:identifier="HINAWA_FW_REQ_ERROR_BUSY"
              glib:nick="busy"
              glib:name="HINAWA_FW_REQ_ERROR_BUSY">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="93">For busyness.</doc>
      </member>
      <member name="generation"
              value="19"
              c:identifier="HINAWA_FW_REQ_ERROR_GENERATION"
              glib:nick="generation"
              glib:name="HINAWA_FW_REQ_ERROR_GENERATION">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="94">For generation.</doc>
      </member>
      <member name="no_ack"
              value="20"
              c:identifier="HINAWA_FW_REQ_ERROR_NO_ACK"
              glib:nick="no-ack"
              glib:name="HINAWA_FW_REQ_ERROR_NO_ACK">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="95">For no acknowledge.</doc>
      </member>
      <member name="invalid"
              value="21"
              c:identifier="HINAWA_FW_REQ_ERROR_INVALID"
              glib:nick="invalid"
              glib:name="HINAWA_FW_REQ_ERROR_INVALID">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="96">For rcode out of specification.</doc>
      </member>
      <function name="quark"
                c:identifier="hinawa_fw_req_error_quark"
                version="2.1">
        <doc xml:space="preserve"
             filename="src/fw_req.c"
             line="19">Return the [alias@GLib.Quark] for [struct@GLib.Error] with code of [enum@FwRcode].</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/fw_req.c"
               line="26">A [alias@GLib.Quark].</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="FwResp"
           c:symbol-prefix="fw_resp"
           c:type="HinawaFwResp"
           parent="GObject.Object"
           glib:type-name="HinawaFwResp"
           glib:get-type="hinawa_fw_resp_get_type"
           glib:type-struct="FwRespClass">
      <doc xml:space="preserve"
           filename="src/fw_resp.c"
           line="8">A transaction responder for request initiated by node in IEEE 1394 bus.
The [class@FwResp] responds transaction initiated by node in IEEE 1394 bus.

This class is an application of Linux FireWire subsystem. All of operations utilize ioctl(2)
with subsystem specific request commands.</doc>
      <source-position filename="src/fw_resp.h" line="83"/>
      <constructor name="new" c:identifier="hinawa_fw_resp_new" version="1.3.">
        <doc xml:space="preserve"
             filename="src/fw_resp.c"
             line="275">Instantiate [class@FwResp] object and return the instance.</doc>
        <source-position filename="src/fw_resp.h" line="85"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/fw_resp.c"
               line="280">a new instance of [class@FwResp].</doc>
          <type name="FwResp" c:type="HinawaFwResp*"/>
        </return-value>
      </constructor>
      <virtual-method name="requested" deprecated="1" deprecated-version="2.2">
        <doc xml:space="preserve"
             filename="src/fw_resp.h"
             line="20">Class closure for the [signal@FwResp::requested] signal.</doc>
        <doc-deprecated xml:space="preserve">Use [vfunc@FwResp.requested3], instead.</doc-deprecated>
        <source-position filename="src/fw_resp.h" line="32"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/fw_resp.h"
               line="27">One of [enum@FwRcode] enumerations corresponding to rcodes defined in IEEE 1394
    specification.</doc>
          <type name="FwRcode" c:type="HinawaFwRcode"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.h"
                 line="22">A [class@FwResp]</doc>
            <type name="FwResp" c:type="HinawaFwResp*"/>
          </instance-parameter>
          <parameter name="tcode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.h"
                 line="23">One of [enum@FwTcode] enumerations</doc>
            <type name="FwTcode" c:type="HinawaFwTcode"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="requested2"
                      version="2.2"
                      deprecated="1"
                      deprecated-version="2.6">
        <doc xml:space="preserve"
             filename="src/fw_resp.h"
             line="34">Class closure for the [signal@FwResp::requested2] signal.</doc>
        <doc-deprecated xml:space="preserve">Use [vfunc@FwResp.requested3], instead.</doc-deprecated>
        <source-position filename="src/fw_resp.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/fw_resp.h"
               line="49">One of [enum@FwRcode enumerations corresponding to rcodes defined in IEEE 1394
    specification.</doc>
          <type name="FwRcode" c:type="HinawaFwRcode"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.h"
                 line="36">A [class@FwResp]</doc>
            <type name="FwResp" c:type="HinawaFwResp*"/>
          </instance-parameter>
          <parameter name="tcode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.h"
                 line="37">One of [enum@FwTcode] enumerations</doc>
            <type name="FwTcode" c:type="HinawaFwTcode"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.h"
                 line="38">The address offset at which the transaction arrives.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.h"
                 line="39">The node ID of source for the transaction.</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="dst" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.h"
                 line="40">The node ID of destination for the transaction.</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="card" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.h"
                 line="41">The index of card corresponding to 1394 OHCI controller.</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="generation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.h"
                 line="42">The generation of bus when the transaction is transferred.</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.h"
                 line="43">The array with elements for byte
   data.</doc>
            <array length="7" zero-terminated="0" c:type="const guint8*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.h"
                 line="45">The length of bytes for the frame.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="requested3" version="2.6">
        <doc xml:space="preserve"
             filename="src/fw_resp.h"
             line="59">Class closure for the [signal@FwResp::requested3] signal.</doc>
        <source-position filename="src/fw_resp.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/fw_resp.h"
               line="75">One of [enum@FwRcode enumerations corresponding to rcodes defined in IEEE 1394
    specification.</doc>
          <type name="FwRcode" c:type="HinawaFwRcode"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.h"
                 line="61">A [class@FwResp]</doc>
            <type name="FwResp" c:type="HinawaFwResp*"/>
          </instance-parameter>
          <parameter name="tcode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.h"
                 line="62">One of [enum@FwTcode] enumerations</doc>
            <type name="FwTcode" c:type="HinawaFwTcode"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.h"
                 line="63">The address offset at which the transaction arrives.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.h"
                 line="64">The node ID of source for the transaction.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="dst" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.h"
                 line="65">The node ID of destination for the transaction.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="card" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.h"
                 line="66">The index of card corresponding to 1394 OHCI controller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="generation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.h"
                 line="67">The generation of bus when the transaction is transferred.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="tstamp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.h"
                 line="68">The time stamp at which the request arrived.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.h"
                 line="69">The array with elements for byte
   data.</doc>
            <array length="8" zero-terminated="0" c:type="const guint8*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.h"
                 line="71">The length of bytes for the frame.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_req_frame"
              c:identifier="hinawa_fw_resp_get_req_frame"
              version="2.0"
              deprecated="1"
              deprecated-version="2.2">
        <doc xml:space="preserve"
             filename="src/fw_resp.c"
             line="410">Retrieve byte frame to be requested.</doc>
        <doc-deprecated xml:space="preserve">handler for [signal@FwResp::requested2] signal can receive the frame in its
	    argument.</doc-deprecated>
        <source-position filename="src/fw_resp.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="412">A [class@FwResp]</doc>
            <type name="FwResp" c:type="HinawaFwResp*"/>
          </instance-parameter>
          <parameter name="frame"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="413">a 8bit array for response frame.</doc>
            <array length="1" zero-terminated="0" c:type="const guint8**">
              <type name="guint8" c:type="guint8*"/>
            </array>
          </parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="414">The length of bytes for the frame.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="release"
              c:identifier="hinawa_fw_resp_release"
              version="1.4.">
        <doc xml:space="preserve"
             filename="src/fw_resp.c"
             line="370">stop to listen to a range of address in local node (e.g. OHCI 1394 controller).</doc>
        <source-position filename="src/fw_resp.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="372">A [class@FwResp].</doc>
            <type name="FwResp" c:type="HinawaFwResp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reserve"
              c:identifier="hinawa_fw_resp_reserve"
              version="1.4."
              throws="1">
        <doc xml:space="preserve"
             filename="src/fw_resp.c"
             line="349">Start to listen to a range of address in host controller which connects to the node. The function
is a variant of [method@FwResp.reserve_within_region] so that the exact range of address should
be reserved as given.</doc>
        <source-position filename="src/fw_resp.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="351">A [class@FwResp].</doc>
            <type name="FwResp" c:type="HinawaFwResp*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="352">A [class@FwNode].</doc>
            <type name="FwNode" c:type="HinawaFwNode*"/>
          </parameter>
          <parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="353">A start address to listen to in host controller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="354">The byte width of address to listen to host controller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="reserve_within_region"
              c:identifier="hinawa_fw_resp_reserve_within_region"
              version="2.3."
              throws="1">
        <doc xml:space="preserve"
             filename="src/fw_resp.c"
             line="288">Start to listen to range of address equals to #width in local node (e.g. 1394 OHCI host
controller), which is used to communicate to the node given as parameter. The range of address
is looked up in region between region_start and region_end.</doc>
        <source-position filename="src/fw_resp.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="290">A [class@FwResp].</doc>
            <type name="FwResp" c:type="HinawaFwResp*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="291">A [class@FwNode].</doc>
            <type name="FwNode" c:type="HinawaFwNode*"/>
          </parameter>
          <parameter name="region_start" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="292">Start offset of address region in which range of address is looked up.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="region_end" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="293">End offset of address region in which range of address is looked up.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="294">The width for range of address to be looked up.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_resp_frame"
              c:identifier="hinawa_fw_resp_set_resp_frame"
              version="2.0">
        <doc xml:space="preserve"
             filename="src/fw_resp.c"
             line="439">Register byte frame as response.</doc>
        <source-position filename="src/fw_resp.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="441">A [class@FwResp]</doc>
            <type name="FwResp" c:type="HinawaFwResp*"/>
          </instance-parameter>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="442">a 8bit array for response frame.</doc>
            <array length="1" zero-terminated="0" c:type="guint8*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="443">The length of bytes for the frame.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <property name="is-reserved"
                version="2.0"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/fw_resp.c"
             line="112">Whether a range of address is reserved or not in host controller.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="offset"
                version="2.3"
                transfer-ownership="none"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/fw_resp.c"
             line="126">The start offset of reserved address range.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="width"
                version="2.3"
                transfer-ownership="none"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/fw_resp.c"
             line="140">The width of reserved address range.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="requested"
                   when="last"
                   version="0.3"
                   deprecated="1"
                   deprecated-version="2.2">
        <doc xml:space="preserve"
             filename="src/fw_resp.c"
             line="158">Emitted when any node transfers requests to the range of address in 1394 OHCI controller
to which this object listening, except for the case that either
[signal@FwResp::requested2] signal handler or [signal@FwResp::requested3] signal handler
is already assigned.

The handler can get data frame by a call of [method@FwResp.get_req_frame] and set data
frame by a call of [method@FwResp.set_resp_frame], then returns [enum@FwRcode] for
response subaction.</doc>
        <doc-deprecated xml:space="preserve">Use [signal@FwResp::requested3], instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/fw_resp.c"
               line="172">One of [enum@FwRcode] enumerations corresponding to rcodes defined in IEEE 1394
    specification.</doc>
          <type name="FwRcode"/>
        </return-value>
        <parameters>
          <parameter name="tcode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="161">One of [enum@FwTcode] enumerations.</doc>
            <type name="FwTcode"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="requested2"
                   when="last"
                   version="2.2"
                   deprecated="1"
                   deprecated-version="2.6">
        <doc xml:space="preserve"
             filename="src/fw_resp.c"
             line="187">Emitted when any node transfers request subaction to the range of address in 1394 OHCI
controller to which this object listening, except for the case that
[signal@FwResp::requested3] signal handler is already assigned.

The handler is expected to call [method@FwResp.set_resp_frame] with frame and return
[enum@FwRcode] for response subaction.

If the version is less than 4, the src, dst, card, generation arguments have invalid
value (=G_MAXUINT).</doc>
        <doc-deprecated xml:space="preserve">Use [signal@FwResp::requested3], instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/fw_resp.c"
               line="210">One of [enum@FwRcode] enumerations corresponding to rcodes defined in IEEE 1394
    specification.</doc>
          <type name="FwRcode"/>
        </return-value>
        <parameters>
          <parameter name="tcode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="190">One of [enum@FwTcode] enumerations</doc>
            <type name="FwTcode"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="191">The address offset at which the transaction arrives.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="192">The node ID of source for the transaction.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="dst" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="193">The node ID of destination for the transaction.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="card" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="194">The index of card corresponding to 1394 OHCI controller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="generation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="195">The generation of bus when the transaction is transferred.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="196">The array with elements for byte
   data.</doc>
            <array length="7" zero-terminated="0" c:type="gpointer">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="198">The length of bytes for the frame.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="requested3" when="last" version="2.6">
        <doc xml:space="preserve"
             filename="src/fw_resp.c"
             line="226">Emitted when any node transfers request subaction to the range of address in 1394 OHCI
controller to which this object listening.

The handler is expected to call [method@FwResp.set_resp_frame] with frame and return
[enum@FwRcode] for response subaction.

The value of @tstamp is unsigned 16 bit integer including higher 3 bits for three low
order bits of second field and the rest 13 bits for cycle field in the format of IEEE
1394 CYCLE_TIMER register.

If the version of kernel ABI for Linux FireWire subsystem is less than 6, the value of
tstamp argument has invalid value (=G_MAXUINT). Furthermore, if the version is less than
4, the src, dst, card, generation arguments have invalid value (=G_MAXUINT).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/fw_resp.c"
               line="254">One of [enum@FwRcode] enumerations corresponding to rcodes defined in IEEE 1394
    specification.</doc>
          <type name="FwRcode"/>
        </return-value>
        <parameters>
          <parameter name="tcode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="229">One of [enum@FwTcode] enumerations</doc>
            <type name="FwTcode"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="230">The address offset at which the transaction arrives.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="231">The node ID of source for the transaction.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="dst" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="232">The node ID of destination for the transaction.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="card" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="233">The index of card corresponding to 1394 OHCI controller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="generation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="234">The generation of bus when the transaction is transferred.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="tstamp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="235">The isochronous cycle at which the request arrived.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="236">The array with elements for byte
   data.</doc>
            <array length="8" zero-terminated="0" c:type="gpointer">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.c"
                 line="238">The length of bytes for the frame.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="FwRespClass"
            c:type="HinawaFwRespClass"
            glib:is-gtype-struct-for="FwResp">
      <source-position filename="src/fw_resp.h" line="83"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="requested">
        <callback name="requested">
          <source-position filename="src/fw_resp.h" line="32"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.h"
                 line="27">One of [enum@FwRcode] enumerations corresponding to rcodes defined in IEEE 1394
    specification.</doc>
            <type name="FwRcode" c:type="HinawaFwRcode"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_resp.h"
                   line="22">A [class@FwResp]</doc>
              <type name="FwResp" c:type="HinawaFwResp*"/>
            </parameter>
            <parameter name="tcode" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_resp.h"
                   line="23">One of [enum@FwTcode] enumerations</doc>
              <type name="FwTcode" c:type="HinawaFwTcode"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="requested2">
        <callback name="requested2">
          <source-position filename="src/fw_resp.h" line="55"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.h"
                 line="49">One of [enum@FwRcode enumerations corresponding to rcodes defined in IEEE 1394
    specification.</doc>
            <type name="FwRcode" c:type="HinawaFwRcode"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_resp.h"
                   line="36">A [class@FwResp]</doc>
              <type name="FwResp" c:type="HinawaFwResp*"/>
            </parameter>
            <parameter name="tcode" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_resp.h"
                   line="37">One of [enum@FwTcode] enumerations</doc>
              <type name="FwTcode" c:type="HinawaFwTcode"/>
            </parameter>
            <parameter name="offset" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_resp.h"
                   line="38">The address offset at which the transaction arrives.</doc>
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="src" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_resp.h"
                   line="39">The node ID of source for the transaction.</doc>
              <type name="guint32" c:type="guint32"/>
            </parameter>
            <parameter name="dst" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_resp.h"
                   line="40">The node ID of destination for the transaction.</doc>
              <type name="guint32" c:type="guint32"/>
            </parameter>
            <parameter name="card" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_resp.h"
                   line="41">The index of card corresponding to 1394 OHCI controller.</doc>
              <type name="guint32" c:type="guint32"/>
            </parameter>
            <parameter name="generation" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_resp.h"
                   line="42">The generation of bus when the transaction is transferred.</doc>
              <type name="guint32" c:type="guint32"/>
            </parameter>
            <parameter name="frame" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_resp.h"
                   line="43">The array with elements for byte
   data.</doc>
              <array length="8" zero-terminated="0" c:type="const guint8*">
                <type name="guint8"/>
              </array>
            </parameter>
            <parameter name="length" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_resp.h"
                   line="45">The length of bytes for the frame.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="requested3">
        <callback name="requested3">
          <source-position filename="src/fw_resp.h" line="80"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/fw_resp.h"
                 line="75">One of [enum@FwRcode enumerations corresponding to rcodes defined in IEEE 1394
    specification.</doc>
            <type name="FwRcode" c:type="HinawaFwRcode"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_resp.h"
                   line="61">A [class@FwResp]</doc>
              <type name="FwResp" c:type="HinawaFwResp*"/>
            </parameter>
            <parameter name="tcode" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_resp.h"
                   line="62">One of [enum@FwTcode] enumerations</doc>
              <type name="FwTcode" c:type="HinawaFwTcode"/>
            </parameter>
            <parameter name="offset" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_resp.h"
                   line="63">The address offset at which the transaction arrives.</doc>
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="src" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_resp.h"
                   line="64">The node ID of source for the transaction.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="dst" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_resp.h"
                   line="65">The node ID of destination for the transaction.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="card" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_resp.h"
                   line="66">The index of card corresponding to 1394 OHCI controller.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="generation" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_resp.h"
                   line="67">The generation of bus when the transaction is transferred.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="tstamp" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_resp.h"
                   line="68">The time stamp at which the request arrived.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="frame" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_resp.h"
                   line="69">The array with elements for byte
   data.</doc>
              <array length="9" zero-terminated="0" c:type="const guint8*">
                <type name="guint8"/>
              </array>
            </parameter>
            <parameter name="length" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/fw_resp.h"
                   line="71">The length of bytes for the frame.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="FwRespError"
                 version="2.2"
                 glib:type-name="HinawaFwRespError"
                 glib:get-type="hinawa_fw_resp_error_get_type"
                 c:type="HinawaFwRespError"
                 glib:error-domain="hinawa-fw-resp-error-quark">
      <doc xml:space="preserve"
           filename="src/hinawa_enum_types.h"
           line="163">A set of error code for [struct@GLib.Error] with domain which equals to Hinawa.FwRespError.</doc>
      <member name="failed"
              value="0"
              c:identifier="HINAWA_FW_RESP_ERROR_FAILED"
              glib:nick="failed"
              glib:name="HINAWA_FW_RESP_ERROR_FAILED">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="165">The generic system call error.</doc>
      </member>
      <member name="reserved"
              value="1"
              c:identifier="HINAWA_FW_RESP_ERROR_RESERVED"
              glib:nick="reserved"
              glib:name="HINAWA_FW_RESP_ERROR_RESERVED">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="166">The instance is already associated to reserved address range.</doc>
      </member>
      <member name="addr_space_used"
              value="2"
              c:identifier="HINAWA_FW_RESP_ERROR_ADDR_SPACE_USED"
              glib:nick="addr-space-used"
              glib:name="HINAWA_FW_RESP_ERROR_ADDR_SPACE_USED">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="167">The address space is used exclusively.</doc>
      </member>
      <function name="quark"
                c:identifier="hinawa_fw_resp_error_quark"
                version="2.2">
        <doc xml:space="preserve"
             filename="src/fw_resp.c"
             line="18">Return the [alias@GLib.Quark] for error domain of [struct@GLib.Error] which has code in
Hinawa.FwRespError.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/fw_resp.c"
               line="26">A [alias@GLib.Quark].</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <enumeration name="FwTcode"
                 version="1.0"
                 glib:type-name="HinawaFwTcode"
                 glib:get-type="hinawa_fw_tcode_get_type"
                 c:type="HinawaFwTcode">
      <doc xml:space="preserve"
           filename="src/hinawa_enum_types.h"
           line="7">A representation for tcode of asynchronous transaction on IEEE 1394 bus.</doc>
      <member name="write_quadlet_request"
              value="0"
              c:identifier="HINAWA_FW_TCODE_WRITE_QUADLET_REQUEST"
              glib:nick="write-quadlet-request"
              glib:name="HINAWA_FW_TCODE_WRITE_QUADLET_REQUEST">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="9">For request to write quadlet.</doc>
      </member>
      <member name="write_block_request"
              value="1"
              c:identifier="HINAWA_FW_TCODE_WRITE_BLOCK_REQUEST"
              glib:nick="write-block-request"
              glib:name="HINAWA_FW_TCODE_WRITE_BLOCK_REQUEST">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="10">For request to write block.</doc>
      </member>
      <member name="write_response"
              value="2"
              c:identifier="HINAWA_FW_TCODE_WRITE_RESPONSE"
              glib:nick="write-response"
              glib:name="HINAWA_FW_TCODE_WRITE_RESPONSE">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="11">For response to write.</doc>
      </member>
      <member name="read_quadlet_request"
              value="4"
              c:identifier="HINAWA_FW_TCODE_READ_QUADLET_REQUEST"
              glib:nick="read-quadlet-request"
              glib:name="HINAWA_FW_TCODE_READ_QUADLET_REQUEST">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="12">For response to read quadlet.</doc>
      </member>
      <member name="read_block_request"
              value="5"
              c:identifier="HINAWA_FW_TCODE_READ_BLOCK_REQUEST"
              glib:nick="read-block-request"
              glib:name="HINAWA_FW_TCODE_READ_BLOCK_REQUEST">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="13">For request to read block.</doc>
      </member>
      <member name="read_quadlet_response"
              value="6"
              c:identifier="HINAWA_FW_TCODE_READ_QUADLET_RESPONSE"
              glib:nick="read-quadlet-response"
              glib:name="HINAWA_FW_TCODE_READ_QUADLET_RESPONSE">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="14">For response to quadlet read.</doc>
      </member>
      <member name="read_block_response"
              value="7"
              c:identifier="HINAWA_FW_TCODE_READ_BLOCK_RESPONSE"
              glib:nick="read-block-response"
              glib:name="HINAWA_FW_TCODE_READ_BLOCK_RESPONSE">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="15">For response to block read.</doc>
      </member>
      <member name="cycle_start"
              value="8"
              c:identifier="HINAWA_FW_TCODE_CYCLE_START"
              glib:nick="cycle-start"
              glib:name="HINAWA_FW_TCODE_CYCLE_START">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="16">For cycle start.</doc>
      </member>
      <member name="lock_request"
              value="9"
              c:identifier="HINAWA_FW_TCODE_LOCK_REQUEST"
              glib:nick="lock-request"
              glib:name="HINAWA_FW_TCODE_LOCK_REQUEST">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="17">For request to lock.</doc>
      </member>
      <member name="stream_data"
              value="10"
              c:identifier="HINAWA_FW_TCODE_STREAM_DATA"
              glib:nick="stream-data"
              glib:name="HINAWA_FW_TCODE_STREAM_DATA">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="18">For stream data.</doc>
      </member>
      <member name="lock_response"
              value="11"
              c:identifier="HINAWA_FW_TCODE_LOCK_RESPONSE"
              glib:nick="lock-response"
              glib:name="HINAWA_FW_TCODE_LOCK_RESPONSE">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="19">For response to lock.</doc>
      </member>
      <member name="lock_mask_swap"
              value="17"
              c:identifier="HINAWA_FW_TCODE_LOCK_MASK_SWAP"
              glib:nick="lock-mask-swap"
              glib:name="HINAWA_FW_TCODE_LOCK_MASK_SWAP">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="20">For lock request for mask-swap.</doc>
      </member>
      <member name="lock_compare_swap"
              value="18"
              c:identifier="HINAWA_FW_TCODE_LOCK_COMPARE_SWAP"
              glib:nick="lock-compare-swap"
              glib:name="HINAWA_FW_TCODE_LOCK_COMPARE_SWAP">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="21">For lock request for compare-swap.</doc>
      </member>
      <member name="lock_fetch_add"
              value="19"
              c:identifier="HINAWA_FW_TCODE_LOCK_FETCH_ADD"
              glib:nick="lock-fetch-add"
              glib:name="HINAWA_FW_TCODE_LOCK_FETCH_ADD">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="22">For lock request for fetch-add.</doc>
      </member>
      <member name="lock_little_add"
              value="20"
              c:identifier="HINAWA_FW_TCODE_LOCK_LITTLE_ADD"
              glib:nick="lock-little-add"
              glib:name="HINAWA_FW_TCODE_LOCK_LITTLE_ADD">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="23">For lock request for little-add.</doc>
      </member>
      <member name="lock_bounded_add"
              value="21"
              c:identifier="HINAWA_FW_TCODE_LOCK_BOUNDED_ADD"
              glib:nick="lock-bounded-add"
              glib:name="HINAWA_FW_TCODE_LOCK_BOUNDED_ADD">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="24">For lock request for bounded-add.</doc>
      </member>
      <member name="lock_wrap_add"
              value="22"
              c:identifier="HINAWA_FW_TCODE_LOCK_WRAP_ADD"
              glib:nick="lock-wrap-add"
              glib:name="HINAWA_FW_TCODE_LOCK_WRAP_ADD">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="25">For lock request for wrap-add.</doc>
      </member>
      <member name="lock_vendor_dependent"
              value="23"
              c:identifier="HINAWA_FW_TCODE_LOCK_VENDOR_DEPENDENT"
              glib:nick="lock-vendor-dependent"
              glib:name="HINAWA_FW_TCODE_LOCK_VENDOR_DEPENDENT">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="26">For lock request for vendor-dependent.</doc>
      </member>
    </enumeration>
    <class name="SndDg00x"
           c:symbol-prefix="snd_dg00x"
           c:type="HinawaSndDg00x"
           deprecated="1"
           deprecated-version="2.5."
           parent="SndUnit"
           glib:type-name="HinawaSndDg00x"
           glib:get-type="hinawa_snd_dg00x_get_type"
           glib:type-struct="SndDg00xClass">
      <doc xml:space="preserve"
           filename="src/snd_dg00x.c"
           line="7">A notification listener for Digidesign Digi 00x models.
A [class@SndDg00x] listen to Dg00x notification and generates signal when received.</doc>
      <doc-deprecated xml:space="preserve">libhitaki library provides [class@Hitaki.SndDigi00x] as the alternative.</doc-deprecated>
      <source-position filename="src/snd_dg00x.h" line="28"/>
      <constructor name="new"
                   c:identifier="hinawa_snd_dg00x_new"
                   version="1.3."
                   deprecated="1"
                   deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_dg00x.c"
             line="53">Instantiate [class@SndDg00x] object and return the instance.</doc>
        <doc-deprecated xml:space="preserve">Use [method@Hitaki.SndDigi00x.new] instead.</doc-deprecated>
        <source-position filename="src/snd_dg00x.h" line="30"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/snd_dg00x.c"
               line="58">an instance of [class@SndDg00x].</doc>
          <type name="SndDg00x" c:type="HinawaSndDg00x*"/>
        </return-value>
      </constructor>
      <virtual-method name="message"
                      version="1.2"
                      deprecated="1"
                      deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_dg00x.h"
             line="16">Class closure for the [signal@SndDg00x::message] signal.</doc>
        <doc-deprecated xml:space="preserve">Use implementation of [vfunc@Hitaki.QuadletNotification.notified] in
       [class@Hitaki.SndDigi00x] instead.</doc-deprecated>
        <source-position filename="src/snd_dg00x.h" line="27"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_dg00x.h"
                 line="18">A [class@SndDg00x]</doc>
            <type name="SndDg00x" c:type="HinawaSndDg00x*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_dg00x.h"
                 line="19">A message</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="open"
              c:identifier="hinawa_snd_dg00x_open"
              version="0.7"
              deprecated="1"
              deprecated-version="2.5."
              throws="1">
        <doc xml:space="preserve"
             filename="src/snd_dg00x.c"
             line="68">Open ALSA hwdep character device and check it for Dg00x devices.</doc>
        <doc-deprecated xml:space="preserve">Use implementation of [method@Hitaki.AlsaFirewire.open]
       [class@Hitaki.SndDigi00x] for instead.</doc-deprecated>
        <source-position filename="src/snd_dg00x.h" line="32"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_dg00x.c"
                 line="70">A [class@SndDg00x]</doc>
            <type name="SndDg00x" c:type="HinawaSndDg00x*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_dg00x.c"
                 line="71">A full path of a special file for ALSA hwdep character device</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="SndUnit" c:type="HinawaSndUnit"/>
      </field>
      <glib:signal name="message"
                   when="last"
                   version="0.7"
                   deprecated="1"
                   deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_dg00x.c"
             line="27">Emitted when Dg00x models transfer notification.</doc>
        <doc-deprecated xml:space="preserve">Use implementation of [signal@Hitaki.QuadletNotification::notified] in
       [class@Hitaki.SndDigi00x] instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_dg00x.c"
                 line="30">A message</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="SndDg00xClass"
            c:type="HinawaSndDg00xClass"
            glib:is-gtype-struct-for="SndDg00x">
      <source-position filename="src/snd_dg00x.h" line="28"/>
      <field name="parent_class">
        <type name="SndUnitClass" c:type="HinawaSndUnitClass"/>
      </field>
      <field name="message">
        <callback name="message">
          <source-position filename="src/snd_dg00x.h" line="27"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/snd_dg00x.h"
                   line="18">A [class@SndDg00x]</doc>
              <type name="SndDg00x" c:type="HinawaSndDg00x*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/snd_dg00x.h"
                   line="19">A message</doc>
              <type name="guint32" c:type="guint32"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="SndDice"
           c:symbol-prefix="snd_dice"
           c:type="HinawaSndDice"
           deprecated="1"
           deprecated-version="2.5."
           parent="SndUnit"
           glib:type-name="HinawaSndDice"
           glib:get-type="hinawa_snd_dice_get_type"
           glib:type-struct="SndDiceClass">
      <doc xml:space="preserve"
           filename="src/snd_dice.c"
           line="7">A notification listener for Dice models.
A [class@SndDice] listen to Dice notification and generates signal when received.</doc>
      <doc-deprecated xml:space="preserve">libhitaki library provides [class@Hitaki.SndDice] as the alternative.</doc-deprecated>
      <source-position filename="src/snd_dice.h" line="32"/>
      <constructor name="new"
                   c:identifier="hinawa_snd_dice_new"
                   version="1.3."
                   deprecated="1"
                   deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_dice.c"
             line="98">Instantiate [class@SndDice] object and return the instance.</doc>
        <doc-deprecated xml:space="preserve">Use [method@Hitaki.SndDice.new] instead.</doc-deprecated>
        <source-position filename="src/snd_dice.h" line="34"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/snd_dice.c"
               line="103">an instance of [class@SndDice].</doc>
          <type name="SndDice" c:type="HinawaSndDice*"/>
        </return-value>
      </constructor>
      <virtual-method name="notified"
                      version="1.2"
                      deprecated="1"
                      deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_dice.h"
             line="20">Class closure for the [signal@SndDice::notified].</doc>
        <doc-deprecated xml:space="preserve">Use implementation of [class@Hitaki.SndDice] for
       [vfunc@Hitaki.QuadletNotification.notified] instead.</doc-deprecated>
        <source-position filename="src/snd_dice.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_dice.h"
                 line="22">A [class@SndDice]</doc>
            <type name="SndDice" c:type="HinawaSndDice*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_dice.h"
                 line="23">A notification message</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="open"
              c:identifier="hinawa_snd_dice_open"
              version="0.4"
              deprecated="1"
              deprecated-version="2.5."
              throws="1">
        <doc xml:space="preserve"
             filename="src/snd_dice.c"
             line="113">Open ALSA hwdep character device and check it for Dice devices.</doc>
        <doc-deprecated xml:space="preserve">Use implementation of [method@Hitaki.AlsaFirewire.open] in
       [class@Hitaki.SndDice] instead.</doc-deprecated>
        <source-position filename="src/snd_dice.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_dice.c"
                 line="115">A [class@SndDice]</doc>
            <type name="SndDice" c:type="HinawaSndDice*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_dice.c"
                 line="116">A full path of a special file for ALSA hwdep character device</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="transaction"
              c:identifier="hinawa_snd_dice_transaction"
              version="1.4."
              deprecated="1"
              deprecated-version="2.5."
              throws="1">
        <doc xml:space="preserve"
             filename="src/snd_dice.c"
             line="146">Execute write transactions to the given address, then wait and check notification.</doc>
        <doc-deprecated xml:space="preserve">Use [class@FwReq] to send write request transaction to the unit, then use
	    implementaion of [signal@Hitaki.QuadletNotification::notified] in
	    [class@Hitaki.SndDice] to wait for notification.</doc-deprecated>
        <source-position filename="src/snd_dice.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_dice.c"
                 line="148">A [class@SndDice]</doc>
            <type name="SndDice" c:type="HinawaSndDice*"/>
          </instance-parameter>
          <parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_dice.c"
                 line="149">A destination address of target device</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_dice.c"
                 line="150">An array with elements for quadlet data to transmit.</doc>
            <array length="2" zero-terminated="0" c:type="const guint32*">
              <type name="guint32" c:type="guint32"/>
            </array>
          </parameter>
          <parameter name="frame_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_dice.c"
                 line="151">The number of quadlets in the frame.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="bit_flag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_dice.c"
                 line="152">bit flag to wait</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="SndUnit" c:type="HinawaSndUnit"/>
      </field>
      <glib:signal name="notified"
                   when="last"
                   version="0.3"
                   deprecated="1"
                   deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_dice.c"
             line="72">Emitted when Dice unit transfers notification.</doc>
        <doc-deprecated xml:space="preserve">Use implementation of [class@Hitaki.SndDice] for
       [signal@Hitaki.QuadletNotification::notified] instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_dice.c"
                 line="75">A notification message</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="SndDiceClass"
            c:type="HinawaSndDiceClass"
            glib:is-gtype-struct-for="SndDice">
      <source-position filename="src/snd_dice.h" line="32"/>
      <field name="parent_class">
        <type name="SndUnitClass" c:type="HinawaSndUnitClass"/>
      </field>
      <field name="notified">
        <callback name="notified">
          <source-position filename="src/snd_dice.h" line="31"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/snd_dice.h"
                   line="22">A [class@SndDice]</doc>
              <type name="SndDice" c:type="HinawaSndDice*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/snd_dice.h"
                   line="23">A notification message</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="SndDiceError"
                 version="2.1"
                 deprecated="1"
                 deprecated-version="2.5."
                 glib:type-name="HinawaSndDiceError"
                 glib:get-type="hinawa_snd_dice_error_get_type"
                 c:type="HinawaSndDiceError"
                 glib:error-domain="hinawa-snd-dice-error-quark">
      <doc xml:space="preserve"
           filename="src/hinawa_enum_types.h"
           line="222">A set of error code for [structGLib.Error] with domain which equals to Hinawa.SndDiceError.</doc>
      <doc-deprecated xml:space="preserve">Use Hitaki.AlsaFirewireError in libhitaki library instead.</doc-deprecated>
      <member name="timeout"
              value="0"
              c:identifier="HINAWA_SND_DICE_ERROR_TIMEOUT"
              glib:nick="timeout"
              glib:name="HINAWA_SND_DICE_ERROR_TIMEOUT">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="224">The transaction is canceled due to response timeout.</doc>
      </member>
      <function name="quark"
                c:identifier="hinawa_snd_dice_error_quark"
                version="2.1"
                deprecated="1"
                deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_dice.c"
             line="16">Return the [alias@GLib.Quark] for [struct@GLib.Error] which has code in Hinawa.SndDiceError.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/snd_dice.c"
               line="24">A [alias@GLib.Quark].</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="SndEfw"
           c:symbol-prefix="snd_efw"
           c:type="HinawaSndEfw"
           deprecated="1"
           deprecated-version="2.5."
           parent="SndUnit"
           glib:type-name="HinawaSndEfw"
           glib:get-type="hinawa_snd_efw_get_type"
           glib:type-struct="SndEfwClass">
      <doc xml:space="preserve"
           filename="src/snd_efw.c"
           line="7">A transaction executor for Fireworks models.
A [class@SndEfw] is an application of Echo Fireworks Transaction.</doc>
      <doc-deprecated xml:space="preserve">libhitaki library provides [class@Hitaki.SndEfw] as the alternative.</doc-deprecated>
      <source-position filename="src/snd_efw.h" line="39"/>
      <constructor name="new"
                   c:identifier="hinawa_snd_efw_new"
                   version="1.3."
                   deprecated="1"
                   deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_efw.c"
             line="105">Instantiate [class@SndEfw] object and return the instance.</doc>
        <doc-deprecated xml:space="preserve">Use [method@Hitaki.SndEfw.new] instead.</doc-deprecated>
        <source-position filename="src/snd_efw.h" line="41"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/snd_efw.c"
               line="110">an instance of [class@SndEfw].</doc>
          <type name="SndEfw" c:type="HinawaSndEfw*"/>
        </return-value>
      </constructor>
      <function name="error_quark"
                c:identifier="hinawa_snd_efw_error_quark"
                version="2.1"
                deprecated="1"
                deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_efw.c"
             line="16">Return the [alias@GLib.Quark] for error domain of [struct@GLib.Error] which has code in
[enum@SndEfwStatus].</doc>
        <doc-deprecated xml:space="preserve">Use Hitaki.EfwProtocolError instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/snd_efw.c"
               line="25">A [alias@GLib.Quark].</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <virtual-method name="responded"
                      version="2.1"
                      deprecated="1"
                      deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_efw.h"
             line="20">Class closure for the [signal@SndEfw::responded] signal.</doc>
        <doc-deprecated xml:space="preserve">Use implementation of [vfunc@Hitaki.EfwProtocol.responded] in
       [class@Hitaki.SndEfw] instead.</doc-deprecated>
        <source-position filename="src/snd_efw.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_efw.h"
                 line="22">A [class@SndEfw].</doc>
            <type name="SndEfw" c:type="HinawaSndEfw*"/>
          </instance-parameter>
          <parameter name="status" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_efw.h"
                 line="23">One of [enum@SndEfwStatus].</doc>
            <type name="SndEfwStatus" c:type="HinawaSndEfwStatus"/>
          </parameter>
          <parameter name="seqnum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_efw.h"
                 line="24">The sequence number of response.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="category" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_efw.h"
                 line="25">The value of category field in the response.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="command" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_efw.h"
                 line="26">The value of command field in the response.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_efw.h"
                 line="27">The array with elements for
   quadlet data of response for Echo Fireworks protocol.</doc>
            <array length="5" zero-terminated="0" c:type="const guint32*">
              <type name="guint32"/>
            </array>
          </parameter>
          <parameter name="frame_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_efw.h"
                 line="29">The number of elements of the array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="open"
              c:identifier="hinawa_snd_efw_open"
              version="0.3"
              deprecated="1"
              deprecated-version="2.5."
              throws="1">
        <doc xml:space="preserve"
             filename="src/snd_efw.c"
             line="120">Open ALSA hwdep character device and check it for Fireworks devices.</doc>
        <doc-deprecated xml:space="preserve">Use implementation of [method@Hitaki.AlsaFirewire.open] in
       [class@Hitaki.SndEfw] instead.</doc-deprecated>
        <source-position filename="src/snd_efw.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_efw.c"
                 line="122">A [class@SndEfw]</doc>
            <type name="SndEfw" c:type="HinawaSndEfw*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_efw.c"
                 line="123">A full path of a special file for ALSA hwdep character device</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="transaction"
              c:identifier="hinawa_snd_efw_transaction"
              version="1.4."
              deprecated="1"
              deprecated-version="2.5."
              throws="1">
        <doc xml:space="preserve"
             filename="src/snd_efw.c"
             line="339">Transfer request of transaction according to Echo Fireworks Transaction protocol, then wait for
the response of transaction within 200 millisecond timeout.</doc>
        <doc-deprecated xml:space="preserve">Use implementation of [method@Hitaki.EfwProtocol.transaction] in
       [class@Hitaki.SndEfw] instead.</doc-deprecated>
        <source-position filename="src/snd_efw.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_efw.c"
                 line="341">A [class@SndEfw].</doc>
            <type name="SndEfw" c:type="HinawaSndEfw*"/>
          </instance-parameter>
          <parameter name="category" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_efw.c"
                 line="342">one of category for the transaction.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="command" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_efw.c"
                 line="343">one of commands for the transaction.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="args"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/snd_efw.c"
                 line="344">An array with elements for quadlet data as
  arguments for command.</doc>
            <array length="3" zero-terminated="0" c:type="const guint32*">
              <type name="guint32" c:type="guint32"/>
            </array>
          </parameter>
          <parameter name="arg_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_efw.c"
                 line="346">The number of quadlets in the args array.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="params"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/snd_efw.c"
                 line="347">An array with elements for quadlet data to save
    parameters in response. Callers should give it for buffer with enough space against
    the request since this library performs no reallocation. Due to the reason, the value
    of this argument should point to the pointer to the array and immutable. The content
    of array is mutable for parameters in response.</doc>
            <array length="5" zero-terminated="0" c:type="guint32* const*">
              <type name="guint32" c:type="guint32*"/>
            </array>
          </parameter>
          <parameter name="param_count"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_efw.c"
                 line="352">The number of quadlets in the params array.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="transaction_async"
              c:identifier="hinawa_snd_efw_transaction_async"
              version="2.1."
              deprecated="1"
              deprecated-version="2.5."
              throws="1">
        <doc xml:space="preserve"
             filename="src/snd_efw.c"
             line="152">Transfer asynchronous transaction for command frame of Echo Fireworks protocol. When receiving
asynchronous transaction for response frame, [signal@SndEfw::responded] GObject signal is
emitted.</doc>
        <doc-deprecated xml:space="preserve">Use implementation of [method@Hitaki.EfwProtocol.transmit_request] in
       [class@Hitaki.SndEfw] instead.</doc-deprecated>
        <source-position filename="src/snd_efw.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_efw.c"
                 line="154">A [class@SndEfw].</doc>
            <type name="SndEfw" c:type="HinawaSndEfw*"/>
          </instance-parameter>
          <parameter name="category" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_efw.c"
                 line="155">One of category for the transaction.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="command" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_efw.c"
                 line="156">One of commands for the transaction.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="args"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/snd_efw.c"
                 line="157">An array with elements for quadlet data as
  arguments for command.</doc>
            <array length="3" zero-terminated="0" c:type="const guint32*">
              <type name="guint32" c:type="guint32"/>
            </array>
          </parameter>
          <parameter name="arg_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_efw.c"
                 line="159">The number of quadlets in the args array.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="resp_seqnum"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/snd_efw.c"
                 line="160">The sequence number for response transaction;</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
        </parameters>
      </method>
      <method name="transaction_sync"
              c:identifier="hinawa_snd_efw_transaction_sync"
              version="2.1."
              deprecated="1"
              deprecated-version="2.5."
              throws="1">
        <doc xml:space="preserve"
             filename="src/snd_efw.c"
             line="254">Transfer asynchronous transaction for command frame of Echo Fireworks protocol, then wait
asynchronous transaction for response frame within the given timeout.</doc>
        <doc-deprecated xml:space="preserve">Use implementation of [method@Hitaki.EfwProtocol.transaction] in
       [class@Hitaki.SndEfw] instead.</doc-deprecated>
        <source-position filename="src/snd_efw.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_efw.c"
                 line="256">A [class@SndEfw].</doc>
            <type name="SndEfw" c:type="HinawaSndEfw*"/>
          </instance-parameter>
          <parameter name="category" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_efw.c"
                 line="257">one of category for the transaction.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="command" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_efw.c"
                 line="258">one of commands for the transaction.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="args"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/snd_efw.c"
                 line="259">An array with elements for quadlet data as
  arguments for command.</doc>
            <array length="3" zero-terminated="0" c:type="const guint32*">
              <type name="guint32" c:type="guint32"/>
            </array>
          </parameter>
          <parameter name="arg_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_efw.c"
                 line="261">The number of quadlets in the args array.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="params"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/snd_efw.c"
                 line="262">An array with elements for quadlet data
    to save parameters in response. Callers should give it for buffer with enough space
    against the request since this library performs no reallocation. Due to the reason,
    the value of this argument should point to the pointer to the array and immutable. The
    content of array is mutable for parameters in response.</doc>
            <array length="5" zero-terminated="0" c:type="guint32* const*">
              <type name="guint32" c:type="guint32*"/>
            </array>
          </parameter>
          <parameter name="param_count"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_efw.c"
                 line="267">The number of quadlets in the params array.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="timeout_ms" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_efw.c"
                 line="268">The timeout to wait for response of the transaction since request is transferred in
	milliseconds.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="SndUnit" c:type="HinawaSndUnit"/>
      </field>
      <glib:signal name="responded"
                   when="last"
                   version="2.1"
                   deprecated="1"
                   deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_efw.c"
             line="69">Emitted when the unit transfers asynchronous packet as response for Echo Audio Fireworks
protocol, and the process successfully reads the content of response from ALSA Fireworks
driver, the [signal@SndEfw::responded] signal handler is called with parameters of the
response.</doc>
        <doc-deprecated xml:space="preserve">Use implementation of [class@Hitaki.SndEfw] for
       [signal@Hitaki.EfwProtocol::responded] instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="status" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_efw.c"
                 line="72">One of [enum@SndEfwStatus].</doc>
            <type name="SndEfwStatus"/>
          </parameter>
          <parameter name="seqnum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_efw.c"
                 line="73">The sequence number of response.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="category" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_efw.c"
                 line="74">The value of category field in the response.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="command" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_efw.c"
                 line="75">The value of command field in the response.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_efw.c"
                 line="76">The array with elements for
   quadlet data of response for Echo Fireworks protocol.</doc>
            <array length="5" zero-terminated="0" c:type="gpointer">
              <type name="guint32"/>
            </array>
          </parameter>
          <parameter name="frame_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_efw.c"
                 line="78">The number of elements of the array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="SndEfwClass"
            c:type="HinawaSndEfwClass"
            glib:is-gtype-struct-for="SndEfw">
      <source-position filename="src/snd_efw.h" line="39"/>
      <field name="parent_class">
        <type name="SndUnitClass" c:type="HinawaSndUnitClass"/>
      </field>
      <field name="responded">
        <callback name="responded">
          <source-position filename="src/snd_efw.h" line="37"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/snd_efw.h"
                   line="22">A [class@SndEfw].</doc>
              <type name="SndEfw" c:type="HinawaSndEfw*"/>
            </parameter>
            <parameter name="status" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/snd_efw.h"
                   line="23">One of [enum@SndEfwStatus].</doc>
              <type name="SndEfwStatus" c:type="HinawaSndEfwStatus"/>
            </parameter>
            <parameter name="seqnum" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/snd_efw.h"
                   line="24">The sequence number of response.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="category" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/snd_efw.h"
                   line="25">The value of category field in the response.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="command" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/snd_efw.h"
                   line="26">The value of command field in the response.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="frame" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/snd_efw.h"
                   line="27">The array with elements for
   quadlet data of response for Echo Fireworks protocol.</doc>
              <array length="6" zero-terminated="0" c:type="const guint32*">
                <type name="guint32"/>
              </array>
            </parameter>
            <parameter name="frame_size" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/snd_efw.h"
                   line="29">The number of elements of the array.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="SndEfwStatus"
                 version="2.1"
                 deprecated="1"
                 deprecated-version="2.5."
                 glib:type-name="HinawaSndEfwStatus"
                 glib:get-type="hinawa_snd_efw_status_get_type"
                 c:type="HinawaSndEfwStatus">
      <doc xml:space="preserve"
           filename="src/hinawa_enum_types.h"
           line="235">A set of status code for Echo Audio Fireworks Transaction.</doc>
      <doc-deprecated xml:space="preserve">Use Hitaki.EfwProtocolError in libhitaki library instead.</doc-deprecated>
      <member name="ok"
              value="0"
              c:identifier="HINAWA_SND_EFW_STATUS_OK"
              glib:nick="ok"
              glib:name="HINAWA_SND_EFW_STATUS_OK">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="237">The transaction finishes successfully.</doc>
      </member>
      <member name="bad"
              value="1"
              c:identifier="HINAWA_SND_EFW_STATUS_BAD"
              glib:nick="bad"
              glib:name="HINAWA_SND_EFW_STATUS_BAD">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="238">The request or response includes invalid header.</doc>
      </member>
      <member name="bad_command"
              value="2"
              c:identifier="HINAWA_SND_EFW_STATUS_BAD_COMMAND"
              glib:nick="bad-command"
              glib:name="HINAWA_SND_EFW_STATUS_BAD_COMMAND">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="239">The request includes invalid category or command.</doc>
      </member>
      <member name="comm_err"
              value="3"
              c:identifier="HINAWA_SND_EFW_STATUS_COMM_ERR"
              glib:nick="comm-err"
              glib:name="HINAWA_SND_EFW_STATUS_COMM_ERR">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="240">The transaction fails due to communication error.</doc>
      </member>
      <member name="bad_quad_count"
              value="4"
              c:identifier="HINAWA_SND_EFW_STATUS_BAD_QUAD_COUNT"
              glib:nick="bad-quad-count"
              glib:name="HINAWA_SND_EFW_STATUS_BAD_QUAD_COUNT">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="241">The number of quadlets in transaction is invalid.</doc>
      </member>
      <member name="unsupported"
              value="5"
              c:identifier="HINAWA_SND_EFW_STATUS_UNSUPPORTED"
              glib:nick="unsupported"
              glib:name="HINAWA_SND_EFW_STATUS_UNSUPPORTED">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="242">The request is not supported.</doc>
      </member>
      <member name="timeout"
              value="6"
              c:identifier="HINAWA_SND_EFW_STATUS_TIMEOUT"
              glib:nick="timeout"
              glib:name="HINAWA_SND_EFW_STATUS_TIMEOUT">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="243">The transaction is canceled due to response timeout.</doc>
      </member>
      <member name="dsp_timeout"
              value="7"
              c:identifier="HINAWA_SND_EFW_STATUS_DSP_TIMEOUT"
              glib:nick="dsp-timeout"
              glib:name="HINAWA_SND_EFW_STATUS_DSP_TIMEOUT">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="244">The operation for DSP did not finish within timeout.</doc>
      </member>
      <member name="bad_rate"
              value="8"
              c:identifier="HINAWA_SND_EFW_STATUS_BAD_RATE"
              glib:nick="bad-rate"
              glib:name="HINAWA_SND_EFW_STATUS_BAD_RATE">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="245">The request includes invalid value for sampling frequency.</doc>
      </member>
      <member name="bad_clock"
              value="9"
              c:identifier="HINAWA_SND_EFW_STATUS_BAD_CLOCK"
              glib:nick="bad-clock"
              glib:name="HINAWA_SND_EFW_STATUS_BAD_CLOCK">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="246">The request includes invalid value for source of clock.</doc>
      </member>
      <member name="bad_channel"
              value="10"
              c:identifier="HINAWA_SND_EFW_STATUS_BAD_CHANNEL"
              glib:nick="bad-channel"
              glib:name="HINAWA_SND_EFW_STATUS_BAD_CHANNEL">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="247">The request includes invalid value for the number of channel.</doc>
      </member>
      <member name="bad_pan"
              value="11"
              c:identifier="HINAWA_SND_EFW_STATUS_BAD_PAN"
              glib:nick="bad-pan"
              glib:name="HINAWA_SND_EFW_STATUS_BAD_PAN">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="248">The request includes invalid value for panning.</doc>
      </member>
      <member name="flash_busy"
              value="12"
              c:identifier="HINAWA_SND_EFW_STATUS_FLASH_BUSY"
              glib:nick="flash-busy"
              glib:name="HINAWA_SND_EFW_STATUS_FLASH_BUSY">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="249">The on-board flash is busy and not operable.</doc>
      </member>
      <member name="bad_mirror"
              value="13"
              c:identifier="HINAWA_SND_EFW_STATUS_BAD_MIRROR"
              glib:nick="bad-mirror"
              glib:name="HINAWA_SND_EFW_STATUS_BAD_MIRROR">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="250">The request includes invalid value for mirroring channel.</doc>
      </member>
      <member name="bad_led"
              value="14"
              c:identifier="HINAWA_SND_EFW_STATUS_BAD_LED"
              glib:nick="bad-led"
              glib:name="HINAWA_SND_EFW_STATUS_BAD_LED">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="251">The request includes invalid value for LED.</doc>
      </member>
      <member name="bad_parameter"
              value="15"
              c:identifier="HINAWA_SND_EFW_STATUS_BAD_PARAMETER"
              glib:nick="bad-parameter"
              glib:name="HINAWA_SND_EFW_STATUS_BAD_PARAMETER">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="252">The request includes invalid value of parameter.</doc>
      </member>
      <member name="large_resp"
              value="16"
              c:identifier="HINAWA_SND_EFW_STATUS_LARGE_RESP"
              glib:nick="large-resp"
              glib:name="HINAWA_SND_EFW_STATUS_LARGE_RESP">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="253">The size of response is larger than expected.</doc>
      </member>
    </enumeration>
    <class name="SndMotu"
           c:symbol-prefix="snd_motu"
           c:type="HinawaSndMotu"
           deprecated="1"
           deprecated-version="2.5."
           parent="SndUnit"
           glib:type-name="HinawaSndMotu"
           glib:get-type="hinawa_snd_motu_get_type"
           glib:type-struct="SndMotuClass">
      <doc xml:space="preserve"
           filename="src/snd_motu.c"
           line="7">A notification listener for Motu models.
A [class@SndMotu] is an application of asynchronous notification defined by Mark of the Unicorn
(MOTU).</doc>
      <doc-deprecated xml:space="preserve">libhitaki library provides [class@Hitaki.SndMotu] as the alternative.</doc-deprecated>
      <source-position filename="src/snd_motu.h" line="43"/>
      <constructor name="new"
                   c:identifier="hinawa_snd_motu_new"
                   version="1.3."
                   deprecated="1"
                   deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_motu.c"
             line="85">Instantiate [class@SndMotu] object and return the instance.</doc>
        <doc-deprecated xml:space="preserve">Use [method@Hitaki.SndMotu.new] instead.</doc-deprecated>
        <source-position filename="src/snd_motu.h" line="45"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/snd_motu.c"
               line="90">an instance of [class@SndMotu].</doc>
          <type name="SndMotu" c:type="HinawaSndMotu*"/>
        </return-value>
      </constructor>
      <virtual-method name="notified"
                      version="1.2"
                      deprecated="1"
                      deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_motu.h"
             line="16">Class closure for the [signal@SndMotu::notified] signal.</doc>
        <doc-deprecated xml:space="preserve">Use implementation of [vfunc@Hitaki.QuadletNotification.notified]
       in [class@Hitaki.SndMotu] instead.</doc-deprecated>
        <source-position filename="src/snd_motu.h" line="27"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu.h"
                 line="18">A [class@SndMotu]</doc>
            <type name="SndMotu" c:type="HinawaSndMotu*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu.h"
                 line="19">A notification message</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="register_dsp_changed"
                      version="2.4"
                      deprecated="1"
                      deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_motu.h"
             line="29">Class closure for the [signal@SndMotu::register-dsp-changed] signal.</doc>
        <doc-deprecated xml:space="preserve">Use implementation [vfunc@Hitaki.MotuRegisterDsp.changed] in
       [class@Hitaki.SndMotu] instead.</doc-deprecated>
        <source-position filename="src/snd_motu.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu.h"
                 line="31">A [class@SndMotu]</doc>
            <type name="SndMotu" c:type="HinawaSndMotu*"/>
          </instance-parameter>
          <parameter name="events" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu.h"
                 line="32">The array with element for
    unsigned 32 bit encoded data.</doc>
            <array length="1" zero-terminated="0" c:type="const guint32*">
              <type name="guint32"/>
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu.h"
                 line="34">The length of events.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="open"
              c:identifier="hinawa_snd_motu_open"
              version="0.8"
              deprecated="1"
              deprecated-version="2.5."
              throws="1">
        <doc xml:space="preserve"
             filename="src/snd_motu.c"
             line="100">Open ALSA hwdep character device and check it for Motu devices.</doc>
        <doc-deprecated xml:space="preserve">Use implementation of [method@Hitaki.AlsaFirewire.open] in
       [class@Hitaki.SndMotu] instead.</doc-deprecated>
        <source-position filename="src/snd_motu.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu.c"
                 line="102">A [class@SndMotu]</doc>
            <type name="SndMotu" c:type="HinawaSndMotu*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu.c"
                 line="103">A full path of a special file for ALSA hwdep character device</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="read_command_dsp_meter"
              c:identifier="hinawa_snd_motu_read_command_dsp_meter"
              version="2.4"
              deprecated="1"
              deprecated-version="2.5."
              throws="1">
        <doc xml:space="preserve"
             filename="src/snd_motu.c"
             line="181">Read data of meter information for command DSP models.</doc>
        <doc-deprecated xml:space="preserve">Use implementation of [method@Hitaki.MotuCommandDsp.read_float_meter] in
       [class@Hitaki.SndMotu] instead.</doc-deprecated>
        <source-position filename="src/snd_motu.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu.c"
                 line="183">A [class@SndMotu]</doc>
            <type name="SndMotu" c:type="HinawaSndMotu*"/>
          </instance-parameter>
          <parameter name="meter"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/snd_motu.c"
                 line="184">The data for meter.</doc>
            <array zero-terminated="0"
                   c:type="gfloat* const*"
                   fixed-size="400">
              <type name="gfloat" c:type="gfloat"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="read_register_dsp_meter"
              c:identifier="hinawa_snd_motu_read_register_dsp_meter"
              version="2.4"
              deprecated="1"
              deprecated-version="2.5."
              throws="1">
        <doc xml:space="preserve"
             filename="src/snd_motu.c"
             line="152">Read data of meter information for register DSP models.</doc>
        <doc-deprecated xml:space="preserve">Use implementation of [method@Hitaki.MotuRegisterDsp.read_byte_meter] in
       [class@Hitaki.SndMotu] instead.</doc-deprecated>
        <source-position filename="src/snd_motu.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu.c"
                 line="154">A [class@SndMotu]</doc>
            <type name="SndMotu" c:type="HinawaSndMotu*"/>
          </instance-parameter>
          <parameter name="meter"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/snd_motu.c"
                 line="155">The data of meter. Index 0 to 23 for inputs and index 24
   to 47 for outputs.</doc>
            <array zero-terminated="0" c:type="guint8* const*" fixed-size="48">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="read_register_dsp_parameter"
              c:identifier="hinawa_snd_motu_read_register_dsp_parameter"
              version="2.4"
              deprecated="1"
              deprecated-version="2.5."
              throws="1">
        <doc xml:space="preserve"
             filename="src/snd_motu.c"
             line="122">Read parameter for register DSP models.</doc>
        <doc-deprecated xml:space="preserve">Use implementation of [method@Hitaki.MotuRegisterDsp.read_parameter] in
       [class@Hitaki.SndMotu] instead.</doc-deprecated>
        <source-position filename="src/snd_motu.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu.c"
                 line="124">A [class@SndMotu].</doc>
            <type name="SndMotu" c:type="HinawaSndMotu*"/>
          </instance-parameter>
          <parameter name="param"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/snd_motu.c"
                 line="125">A [struct@SndMotuRegisterDspParameter].</doc>
            <type name="SndMotuRegisterDspParameter"
                  c:type="HinawaSndMotuRegisterDspParameter* const*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="SndUnit" c:type="HinawaSndUnit"/>
      </field>
      <glib:signal name="notified"
                   when="last"
                   version="0.8"
                   deprecated="1"
                   deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_motu.c"
             line="32">Emitted when Motu models transfer notification.</doc>
        <doc-deprecated xml:space="preserve">Use implementation of [signal@Hitaki.QuadletNotification::notified]
       in [class@Hitaki.SndMotu] instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu.c"
                 line="35">A notification message</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="register-dsp-changed"
                   when="last"
                   version="2.4"
                   deprecated="1"
                   deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_motu.c"
             line="52">Emitted when MOTU register DSP models transfer events by messages in the sequence of
isochronous packet. The event consists of encoded data. The most significant byte is the
type of message. The next two bytes are identifier 0 and 1. The least significant byte
is value. The meaning of identifier 0, 1 and value is decided depending on the type.
For detail, see `sound/firewire/motu/motu-register-dsp-message-parser.c` in Linux kernel.</doc>
        <doc-deprecated xml:space="preserve">Use implementation [signal@Hitaki.MotuRegisterDsp::changed] in
       [class@Hitaki.SndMotu] instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="events" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu.c"
                 line="55">The array with element for
    unsigned 32 bit encoded data.</doc>
            <array length="1" zero-terminated="0" c:type="gpointer">
              <type name="guint32"/>
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu.c"
                 line="57">The length of events.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="SndMotuClass"
            c:type="HinawaSndMotuClass"
            glib:is-gtype-struct-for="SndMotu">
      <source-position filename="src/snd_motu.h" line="43"/>
      <field name="parent_class">
        <type name="SndUnitClass" c:type="HinawaSndUnitClass"/>
      </field>
      <field name="notified">
        <callback name="notified">
          <source-position filename="src/snd_motu.h" line="27"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/snd_motu.h"
                   line="18">A [class@SndMotu]</doc>
              <type name="SndMotu" c:type="HinawaSndMotu*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/snd_motu.h"
                   line="19">A notification message</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="register_dsp_changed">
        <callback name="register_dsp_changed">
          <source-position filename="src/snd_motu.h" line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/snd_motu.h"
                   line="31">A [class@SndMotu]</doc>
              <type name="SndMotu" c:type="HinawaSndMotu*"/>
            </parameter>
            <parameter name="events" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/snd_motu.h"
                   line="32">The array with element for
    unsigned 32 bit encoded data.</doc>
              <array length="2" zero-terminated="0" c:type="const guint32*">
                <type name="guint32"/>
              </array>
            </parameter>
            <parameter name="length" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/snd_motu.h"
                   line="34">The length of events.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="SndMotuRegisterDspParameter"
            c:type="HinawaSndMotuRegisterDspParameter"
            version="2.4."
            deprecated="1"
            deprecated-version="2.5."
            glib:type-name="HinawaSndMotuRegisterDspParameter"
            glib:get-type="hinawa_snd_motu_register_dsp_parameter_get_type"
            c:symbol-prefix="snd_motu_register_dsp_parameter">
      <doc xml:space="preserve"
           filename="src/snd_motu_register_dsp_parameter.c"
           line="4">A boxed object for container of parameter in register DSP model.
A [struct@SndMotuRegisterDspParameter] is a boxed object for container of parameter in register
DSP model.</doc>
      <doc-deprecated xml:space="preserve">libhitaki library provides [struct@Hitaki.SndMotuRegisterDspParameter] as the
       alternative.</doc-deprecated>
      <source-position filename="src/snd_motu_register_dsp_parameter.h"
                       line="16"/>
      <field name="parameter" readable="0" private="1">
        <array zero-terminated="0" fixed-size="512">
          <type name="guint8" c:type="guint8"/>
        </array>
      </field>
      <constructor name="new"
                   c:identifier="hinawa_snd_motu_register_dsp_parameter_new"
                   version="2.4"
                   deprecated="1"
                   deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_motu_register_dsp_parameter.c"
             line="30">Instantiate [struct@SndMotuRegisterDspParameter] object and return the instance.</doc>
        <doc-deprecated xml:space="preserve">Use [method@Hitaki.SndMotuRegisterDspParameter.new] instead.</doc-deprecated>
        <source-position filename="src/snd_motu_register_dsp_parameter.h"
                         line="20"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/snd_motu_register_dsp_parameter.c"
               line="35">an instance of [struct@SndMotuRegisterDspParameter].</doc>
          <type name="SndMotuRegisterDspParameter"
                c:type="HinawaSndMotuRegisterDspParameter*"/>
        </return-value>
      </constructor>
      <method name="get_headphone_output_paired_assignment"
              c:identifier="hinawa_snd_motu_register_dsp_parameter_get_headphone_output_paired_assignment"
              deprecated="1"
              deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_motu_register_dsp_parameter.c"
             line="273">Get the array with elements for the data of paired headphone output source. The data has index
value of source.</doc>
        <doc-deprecated xml:space="preserve">Use
       [method@Hitaki.SndMotuRegisterDspParameter.get_headphone_output_paired_assignment]
       instead.</doc-deprecated>
        <source-position filename="src/snd_motu_register_dsp_parameter.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="275">A [struct@SndMotuRegisterDspParameter].</doc>
            <type name="SndMotuRegisterDspParameter"
                  c:type="const HinawaSndMotuRegisterDspParameter*"/>
          </instance-parameter>
          <parameter name="assignment"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="276">The value of paired headphone assignment.</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_headphone_output_paired_volume"
              c:identifier="hinawa_snd_motu_register_dsp_parameter_get_headphone_output_paired_volume"
              deprecated="1"
              deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_motu_register_dsp_parameter.c"
             line="249">Get the array with elements for the data of paired headphone output volume. The data has volume
value between 0x00 and 0x80.</doc>
        <doc-deprecated xml:space="preserve">Use
       [method@Hitaki.SndMotuRegisterDspParameter.get_headphone_output_paired_volume]
       instead.</doc-deprecated>
        <source-position filename="src/snd_motu_register_dsp_parameter.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="251">A [struct@SndMotuRegisterDspParameter].</doc>
            <type name="SndMotuRegisterDspParameter"
                  c:type="const HinawaSndMotuRegisterDspParameter*"/>
          </instance-parameter>
          <parameter name="volume"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="252">The value of paired headphone output.</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_input_flag"
              c:identifier="hinawa_snd_motu_register_dsp_parameter_get_input_flag"
              deprecated="1"
              deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_motu_register_dsp_parameter.c"
             line="376">Get the array with elements for the data of input flags. The data consists of bit flags below:

- 0x01: whether to make paired input
- 0x02: whether to enable phantom powering
- 0x04: whether to enable attenuation pad
- 0x08: whether to detect plug insert to jack</doc>
        <doc-deprecated xml:space="preserve">Use [method@Hitaki.SndMotuRegisterDspParameter.get_input_flag] instead.</doc-deprecated>
        <source-position filename="src/snd_motu_register_dsp_parameter.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="378">A [struct@SndMotuRegisterDspParameter].</doc>
            <type name="SndMotuRegisterDspParameter"
                  c:type="const HinawaSndMotuRegisterDspParameter*"/>
          </instance-parameter>
          <parameter name="flag"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="379">The array with elements for the data of input
  flags.</doc>
            <array zero-terminated="0" c:type="const guint8**" fixed-size="10">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_input_gain_and_invert"
              c:identifier="hinawa_snd_motu_register_dsp_parameter_get_input_gain_and_invert"
              deprecated="1"
              deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_motu_register_dsp_parameter.c"
             line="345">Get the array with elements for input gain and invert flags. The interpretation of data is
different in below two groups:

- Ultralite
    - 0x1f: the gain.
    - 0x20: whether to invert phase of the input
- Audio Express and 4 pre
    - 0x3f: the gain
    - 0x40: whether to invert phase of the input</doc>
        <doc-deprecated xml:space="preserve">Use [method@Hitaki.SndMotuRegisterDspParameter.get_input_gain_and_invert]
       instead.</doc-deprecated>
        <source-position filename="src/snd_motu_register_dsp_parameter.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="347">A [struct@SndMotuRegisterDspParameter].</doc>
            <type name="SndMotuRegisterDspParameter"
                  c:type="const HinawaSndMotuRegisterDspParameter*"/>
          </instance-parameter>
          <parameter name="gain_and_invert"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="348">The array with elements for the data
	     of input gain and invert flags.</doc>
            <array zero-terminated="0" c:type="const guint8**" fixed-size="10">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_line_input_boost_flag"
              c:identifier="hinawa_snd_motu_register_dsp_parameter_get_line_input_boost_flag"
              deprecated="1"
              deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_motu_register_dsp_parameter.c"
             line="297">Get the data for flags of line input boost. The data consists of bit flags for corresponding line
input channel. When the flag stands, the input is boosted.</doc>
        <doc-deprecated xml:space="preserve">Use [method@Hitaki.SndMotuRegisterDspParameter.get_line_input_boost_flag]
       instead.</doc-deprecated>
        <source-position filename="src/snd_motu_register_dsp_parameter.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="299">A [struct@SndMotuRegisterDspParameter].</doc>
            <type name="SndMotuRegisterDspParameter"
                  c:type="const HinawaSndMotuRegisterDspParameter*"/>
          </instance-parameter>
          <parameter name="boost_flag"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="300">The flag of boost for line input.</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_line_input_nominal_level_flag"
              c:identifier="hinawa_snd_motu_register_dsp_parameter_get_line_input_nominal_level_flag"
              deprecated="1"
              deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_motu_register_dsp_parameter.c"
             line="320">Get the data for flags of line input nominal level. The data consists of bit flags for
corresponding line input channel. When the flag stands, the nominal level of input is +4 dBu,
else -10 dBV.</doc>
        <doc-deprecated xml:space="preserve">Use
       [method@Hitaki.SndMotuRegisterDspParameter.get_line_input_nominal_level_flag]
       instead.</doc-deprecated>
        <source-position filename="src/snd_motu_register_dsp_parameter.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="322">A [struct@SndMotuRegisterDspParameter].</doc>
            <type name="SndMotuRegisterDspParameter"
                  c:type="const HinawaSndMotuRegisterDspParameter*"/>
          </instance-parameter>
          <parameter name="nominal_level_flag"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="323">The flag of boost for line input.</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_main_output_paired_volume"
              c:identifier="hinawa_snd_motu_register_dsp_parameter_get_main_output_paired_volume"
              deprecated="1"
              deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_motu_register_dsp_parameter.c"
             line="226">Get the array with elements for the data of paired main output volume. The data has volume value
between 0x00 and 0x80.</doc>
        <doc-deprecated xml:space="preserve">Use [method@Hitaki.SndMotuRegisterDspParameter.get_main_output_paired_volume]
       instead.</doc-deprecated>
        <source-position filename="src/snd_motu_register_dsp_parameter.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="228">A [struct@SndMotuRegisterDspParameter].</doc>
            <type name="SndMotuRegisterDspParameter"
                  c:type="const HinawaSndMotuRegisterDspParameter*"/>
          </instance-parameter>
          <parameter name="volume"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="229">The value of paired main output.</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_mixer_output_paired_flag"
              c:identifier="hinawa_snd_motu_register_dsp_parameter_get_mixer_output_paired_flag"
              deprecated="1"
              deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_motu_register_dsp_parameter.c"
             line="199">Get the array with elements for the data of paired output flags in indicated mixer. The data
consists of bit flags and masks below:

 - 0x0f: the mask for destination of paired output
 - 0x10: whether to enable mute for paired output</doc>
        <doc-deprecated xml:space="preserve">Use [method@Hitaki.SndMotuRegisterDspParameter.get_mixer_output_paired_flag]
       instead.</doc-deprecated>
        <source-position filename="src/snd_motu_register_dsp_parameter.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="201">A [struct@SndMotuRegisterDspParameter].</doc>
            <type name="SndMotuRegisterDspParameter"
                  c:type="const HinawaSndMotuRegisterDspParameter*"/>
          </instance-parameter>
          <parameter name="flag"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="202">The array with elements for the data of paired
  output flag.</doc>
            <array zero-terminated="0" c:type="const guint8**" fixed-size="4">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_mixer_output_paired_volume"
              c:identifier="hinawa_snd_motu_register_dsp_parameter_get_mixer_output_paired_volume"
              deprecated="1"
              deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_motu_register_dsp_parameter.c"
             line="175">Get the array with elements for the data of paired output volume in indicated mixer. The data
has gain value between 0x00 and 0x80.</doc>
        <doc-deprecated xml:space="preserve">Use [method@Hitaki.SndMotuRegisterDspParameter.get_mixer_output_paired_volume]
       instead.</doc-deprecated>
        <source-position filename="src/snd_motu_register_dsp_parameter.h"
                         line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="177">A [struct@SndMotuRegisterDspParameter].</doc>
            <type name="SndMotuRegisterDspParameter"
                  c:type="const HinawaSndMotuRegisterDspParameter*"/>
          </instance-parameter>
          <parameter name="volume"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="178">The array with elements for the data of
    paired output volume.</doc>
            <array zero-terminated="0" c:type="const guint8**" fixed-size="4">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_mixer_source_flag"
              c:identifier="hinawa_snd_motu_register_dsp_parameter_get_mixer_source_flag"
              deprecated="1"
              deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_motu_register_dsp_parameter.c"
             line="95">Get the array with elements for the data of source flags in indicated mixer. The data consists of
bit flags below:

 - 0x01: whether to enable mute function for the source.
 - 0x02: whether to enable solo function for the source.</doc>
        <doc-deprecated xml:space="preserve">Use [method@Hitaki.SndMotuRegisterDspParameter.get_mixer_source_flag] instead.</doc-deprecated>
        <source-position filename="src/snd_motu_register_dsp_parameter.h"
                         line="28"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="97">A [struct@SndMotuRegisterDspParameter].</doc>
            <type name="SndMotuRegisterDspParameter"
                  c:type="const HinawaSndMotuRegisterDspParameter*"/>
          </instance-parameter>
          <parameter name="mixer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="98">the numeric index of mixer, up to 4.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="flag"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="99">The array with elements for the data of source
  flag.</doc>
            <array zero-terminated="0" c:type="const guint8**" fixed-size="20">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_mixer_source_gain"
              c:identifier="hinawa_snd_motu_register_dsp_parameter_get_mixer_source_gain"
              deprecated="1"
              deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_motu_register_dsp_parameter.c"
             line="45">Get the array with elements for the data of source gains in indicated mixer. The data has gain
value between 0x00 and 0x80.</doc>
        <doc-deprecated xml:space="preserve">Use [method@Hitaki.SndMotuRegisterDspParameter.get_mixer_source_gain] instead.</doc-deprecated>
        <source-position filename="src/snd_motu_register_dsp_parameter.h"
                         line="22"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="47">A [struct@SndMotuRegisterDspParameter].</doc>
            <type name="SndMotuRegisterDspParameter"
                  c:type="const HinawaSndMotuRegisterDspParameter*"/>
          </instance-parameter>
          <parameter name="mixer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="48">the numeric index of mixer, up to 4.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="gain"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="49">The array with elements for the data of source
  gains.</doc>
            <array zero-terminated="0" c:type="const guint8**" fixed-size="20">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_mixer_source_paired_balance"
              c:identifier="hinawa_snd_motu_register_dsp_parameter_get_mixer_source_paired_balance"
              deprecated="1"
              deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_motu_register_dsp_parameter.c"
             line="123">Get the array with elements for the data of paired source L/R balance in indicated mixer. The
data has L/R balance value between 0x00 and 0x80.</doc>
        <doc-deprecated xml:space="preserve">Use [method@Hitaki.SndMotuRegisterDspParameter.get_mixer_source_paired_balance]
       instead.</doc-deprecated>
        <source-position filename="src/snd_motu_register_dsp_parameter.h"
                         line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="125">A [struct@SndMotuRegisterDspParameter].</doc>
            <type name="SndMotuRegisterDspParameter"
                  c:type="const HinawaSndMotuRegisterDspParameter*"/>
          </instance-parameter>
          <parameter name="mixer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="126">the numeric index of mixer, up to 4.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="balance"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="127">The array with elements for the data of
     paired source L/R balance.</doc>
            <array zero-terminated="0" c:type="const guint8**" fixed-size="20">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_mixer_source_paired_width"
              c:identifier="hinawa_snd_motu_register_dsp_parameter_get_mixer_source_paired_width"
              deprecated="1"
              deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_motu_register_dsp_parameter.c"
             line="149">Get the array with elements for the data of paired source width in indicated mixer. The data
has width value between 0x00 and 0x80.</doc>
        <doc-deprecated xml:space="preserve">Use [method@Hitaki.SndMotuRegisterDspParameter.get_mixer_source_paired_width]
       instead.</doc-deprecated>
        <source-position filename="src/snd_motu_register_dsp_parameter.h"
                         line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="151">A [struct@SndMotuRegisterDspParameter].</doc>
            <type name="SndMotuRegisterDspParameter"
                  c:type="const HinawaSndMotuRegisterDspParameter*"/>
          </instance-parameter>
          <parameter name="mixer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="152">the numeric index of mixer, up to 4.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="153">The array with elements for the data of
   paired source width.</doc>
            <array zero-terminated="0" c:type="const guint8**" fixed-size="20">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_mixer_source_pan"
              c:identifier="hinawa_snd_motu_register_dsp_parameter_get_mixer_source_pan"
              deprecated="1"
              deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_motu_register_dsp_parameter.c"
             line="70">Get the array with elements for the data of source pans in indicated mixer. The data has pan
value between 0x00 and 0x80.</doc>
        <doc-deprecated xml:space="preserve">Use [method@Hitaki.SndMotuRegisterDspParameter.get_mixer_source_pan] instead.</doc-deprecated>
        <source-position filename="src/snd_motu_register_dsp_parameter.h"
                         line="25"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="72">A [struct@SndMotuRegisterDspParameter].</doc>
            <type name="SndMotuRegisterDspParameter"
                  c:type="const HinawaSndMotuRegisterDspParameter*"/>
          </instance-parameter>
          <parameter name="mixer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="73">the numeric index of mixer, up to 4.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="pan"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_motu_register_dsp_parameter.c"
                 line="74">The array with elements for the data of source
 pan.</doc>
            <array zero-terminated="0" c:type="const guint8**" fixed-size="20">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
        </parameters>
      </method>
    </record>
    <class name="SndTscm"
           c:symbol-prefix="snd_tscm"
           c:type="HinawaSndTscm"
           deprecated="1"
           deprecated-version="2.5."
           parent="SndUnit"
           glib:type-name="HinawaSndTscm"
           glib:get-type="hinawa_snd_tscm_get_type"
           glib:type-struct="SndTscmClass">
      <doc xml:space="preserve"
           filename="src/snd_tscm.c"
           line="7">A state reader for Tascam FireWire models
A [class@SndTscm] is an application of protocol defined by TASCAM.</doc>
      <doc-deprecated xml:space="preserve">libhitaki library provides [class@Hitaki.SndTascam] as the alternative.</doc-deprecated>
      <source-position filename="src/snd_tscm.h" line="30"/>
      <constructor name="new"
                   c:identifier="hinawa_snd_tscm_new"
                   version="1.3."
                   deprecated="1"
                   deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_tscm.c"
             line="61">Instantiate [class@SndTscm] object and return the instance.</doc>
        <doc-deprecated xml:space="preserve">Use [method@Hitaki.SndTascam.new] instead.</doc-deprecated>
        <source-position filename="src/snd_tscm.h" line="32"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/snd_tscm.c"
               line="66">an instance of [class@SndTscm].</doc>
          <type name="SndTscm" c:type="HinawaSndTscm*"/>
        </return-value>
      </constructor>
      <virtual-method name="control"
                      version="1.2"
                      deprecated="1"
                      deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_tscm.h"
             line="16">Class closure for the [signal@SndTscm::control] signal.</doc>
        <doc-deprecated xml:space="preserve">Use implementation of [vfunc@Hitaki.TascamProtocol.changed] in
       [class@Hitaki.SndTascam] instead.</doc-deprecated>
        <source-position filename="src/snd_tscm.h" line="29"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_tscm.h"
                 line="18">A [class@SndTscm]</doc>
            <type name="SndTscm" c:type="HinawaSndTscm*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_tscm.h"
                 line="19">the numeric index on image of status and control info.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="before" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_tscm.h"
                 line="20">the value of info before changed.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="after" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_tscm.h"
                 line="21">the value of info after changed.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_state"
              c:identifier="hinawa_snd_tscm_get_state"
              version="1.1"
              deprecated="1"
              deprecated-version="2.5."
              throws="1">
        <doc xml:space="preserve"
             filename="src/snd_tscm.c"
             line="98">Get the latest states of target device.</doc>
        <doc-deprecated xml:space="preserve">Use implementation of [method@Hitaki.TascamProtocol.read_state] in
       [class@Hitaki.SndTascam] instead.</doc-deprecated>
        <source-position filename="src/snd_tscm.h" line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/snd_tscm.c"
               line="105">state image.</doc>
          <array zero-terminated="0" c:type="const guint32*" fixed-size="64">
            <type name="guint32"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_tscm.c"
                 line="100">A [class@SndTscm]</doc>
            <type name="SndTscm" c:type="HinawaSndTscm*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="open"
              c:identifier="hinawa_snd_tscm_open"
              version="1.1"
              deprecated="1"
              deprecated-version="2.5."
              throws="1">
        <doc xml:space="preserve"
             filename="src/snd_tscm.c"
             line="76">Open ALSA hwdep character device and check it for Tascam devices.</doc>
        <doc-deprecated xml:space="preserve">Use implementation of [method@Hitaki.AlsaFirewire.open] in
       [class@Hitaki.SndTascam] instead.</doc-deprecated>
        <source-position filename="src/snd_tscm.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_tscm.c"
                 line="78">A [class@SndTscm]</doc>
            <type name="SndTscm" c:type="HinawaSndTscm*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_tscm.c"
                 line="79">A full path of a special file for ALSA hwdep character device</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="SndUnit" c:type="HinawaSndUnit"/>
      </field>
      <glib:signal name="control"
                   when="last"
                   version="1.1"
                   deprecated="1"
                   deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_tscm.c"
             line="31">Emitted when TASCAM FireWire unit transfer control message.
is emitted.</doc>
        <doc-deprecated xml:space="preserve">Use implementation of [signal@Hitaki.TascamProtocol::changed] in
       [class@Hitaki.SndTascam] instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_tscm.c"
                 line="34">the numeric index on image of status and control info.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="before" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_tscm.c"
                 line="35">the value of info before changed.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="after" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_tscm.c"
                 line="36">the value of info after changed.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="SndTscmClass"
            c:type="HinawaSndTscmClass"
            glib:is-gtype-struct-for="SndTscm">
      <source-position filename="src/snd_tscm.h" line="30"/>
      <field name="parent_class">
        <type name="SndUnitClass" c:type="HinawaSndUnitClass"/>
      </field>
      <field name="control">
        <callback name="control">
          <source-position filename="src/snd_tscm.h" line="29"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/snd_tscm.h"
                   line="18">A [class@SndTscm]</doc>
              <type name="SndTscm" c:type="HinawaSndTscm*"/>
            </parameter>
            <parameter name="index" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/snd_tscm.h"
                   line="19">the numeric index on image of status and control info.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="before" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/snd_tscm.h"
                   line="20">the value of info before changed.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="after" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/snd_tscm.h"
                   line="21">the value of info after changed.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="SndUnit"
           c:symbol-prefix="snd_unit"
           c:type="HinawaSndUnit"
           deprecated="1"
           deprecated-version="2.5."
           parent="GObject.Object"
           glib:type-name="HinawaSndUnit"
           glib:get-type="hinawa_snd_unit_get_type"
           glib:type-struct="SndUnitClass">
      <doc xml:space="preserve"
           filename="src/snd_unit.c"
           line="15">An event listener for ALSA FireWire sound devices.
This class is an application of ALSA FireWire stack. Any functionality which ALSA drivers in the
stack can be available.</doc>
      <doc-deprecated xml:space="preserve">libhitaki library provides [class@Hitaki.SndUnit] as the alternative.</doc-deprecated>
      <source-position filename="src/snd_unit.h" line="44"/>
      <constructor name="new"
                   c:identifier="hinawa_snd_unit_new"
                   version="1.3."
                   deprecated="1"
                   deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_unit.c"
             line="259">Instantiate [class@SndUnit] object and return the instance.</doc>
        <doc-deprecated xml:space="preserve">Use [method@Hitaki.SndUnit.new] instead.</doc-deprecated>
        <source-position filename="src/snd_unit.h" line="46"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/snd_unit.c"
               line="264">an instance of [class@SndUnit].</doc>
          <type name="SndUnit" c:type="HinawaSndUnit*"/>
        </return-value>
      </constructor>
      <virtual-method name="disconnected"
                      version="2.0"
                      deprecated="1"
                      deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_unit.h"
             line="33">Class closure for the [signal@SndUnit::disconnected].</doc>
        <doc-deprecated xml:space="preserve">Use change notify signal of
       [property@Hitaki.AlsaFirewire:is-disconnected] instead.</doc-deprecated>
        <source-position filename="src/snd_unit.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_unit.h"
                 line="35">A [class@SndUnit]</doc>
            <type name="SndUnit" c:type="HinawaSndUnit*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="lock_status"
                      version="1.2"
                      deprecated="1"
                      deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_unit.h"
             line="20">Class closure for the [signal@SndUnit::lock-status],</doc>
        <doc-deprecated xml:space="preserve">Use change notify signal of [property@Hitaki.AlsaFirewire:is-locked]
       instead.</doc-deprecated>
        <source-position filename="src/snd_unit.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_unit.h"
                 line="22">A [class@SndUnit]</doc>
            <type name="SndUnit" c:type="HinawaSndUnit*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_unit.h"
                 line="23">%TRUE when locked, %FALSE when unlocked.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="create_source"
              c:identifier="hinawa_snd_unit_create_source"
              version="1.4."
              deprecated="1"
              deprecated-version="2.5."
              throws="1">
        <doc xml:space="preserve"
             filename="src/snd_unit.c"
             line="613">Create [struct@GLib.Source] for [struct@GLib.MainContext] to dispatch events for the sound
device.</doc>
        <doc-deprecated xml:space="preserve">Use implementation of [method@Hitaki.AlsaFirewire.create_source] in
       [class@Hitaki.SndUnit] instead.</doc-deprecated>
        <source-position filename="src/snd_unit.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_unit.c"
                 line="615">A [class@SndUnit].</doc>
            <type name="SndUnit" c:type="HinawaSndUnit*"/>
          </instance-parameter>
          <parameter name="gsrc"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/snd_unit.c"
                 line="616">A [struct@GLib.Source].</doc>
            <type name="GLib.Source" c:type="GSource**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_node"
              c:identifier="hinawa_snd_unit_get_node"
              version="2.0."
              deprecated="1"
              deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_unit.c"
             line="357">Retrieve an instance of [class@FwNode] associated to the given unit.</doc>
        <doc-deprecated xml:space="preserve">Instantiate [class@FwNode] according to
       [property@Hitaki.AlsaFirewire:node-device] instead.</doc-deprecated>
        <source-position filename="src/snd_unit.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_unit.c"
                 line="359">A [class@SndUnit].</doc>
            <type name="SndUnit" c:type="HinawaSndUnit*"/>
          </instance-parameter>
          <parameter name="node"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_unit.c"
                 line="360">A [class@FwNode].</doc>
            <type name="FwNode" c:type="HinawaFwNode**"/>
          </parameter>
        </parameters>
      </method>
      <method name="lock"
              c:identifier="hinawa_snd_unit_lock"
              version="0.3"
              deprecated="1"
              deprecated-version="2.5."
              throws="1">
        <doc xml:space="preserve"
             filename="src/snd_unit.c"
             line="380">Disallow corresponding ALSA driver to start packet streaming.</doc>
        <doc-deprecated xml:space="preserve">Use implementation of [method@Hitaki.AlsaFirewire.lock] in
       [class@Hitaki.SndUnit] instead.</doc-deprecated>
        <source-position filename="src/snd_unit.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_unit.c"
                 line="382">A [class@SndUnit]</doc>
            <type name="SndUnit" c:type="HinawaSndUnit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="open"
              c:identifier="hinawa_snd_unit_open"
              version="0.4"
              deprecated="1"
              deprecated-version="2.5."
              throws="1">
        <doc xml:space="preserve"
             filename="src/snd_unit.c"
             line="274">Open ALSA hwdep character device and check it for FireWire sound devices.</doc>
        <doc-deprecated xml:space="preserve">Use implementation of [method@Hitaki.AlsaFirewire.open] in
       [class@Hitaki.SndUnit] instead.</doc-deprecated>
        <source-position filename="src/snd_unit.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_unit.c"
                 line="276">A [class@SndUnit]</doc>
            <type name="SndUnit" c:type="HinawaSndUnit*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_unit.c"
                 line="277">A full path of a special file for ALSA hwdep character device</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unlock"
              c:identifier="hinawa_snd_unit_unlock"
              version="0.3"
              deprecated="1"
              deprecated-version="2.5."
              throws="1">
        <doc xml:space="preserve"
             filename="src/snd_unit.c"
             line="414">Allow corresponding ALSA driver to start packet streaming.</doc>
        <doc-deprecated xml:space="preserve">Use implementation of [method@Hitaki.AlsaFirewire.unlock] in
       [class@Hitaki.SndUnit] instead.</doc-deprecated>
        <source-position filename="src/snd_unit.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_unit.c"
                 line="416">A [class@SndUnit]</doc>
            <type name="SndUnit" c:type="HinawaSndUnit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="card"
                version="2.0"
                deprecated="1"
                deprecated-version="2.5."
                transfer-ownership="none"
                default-value="0">
        <doc-deprecated xml:space="preserve">Use [property@Hitaki.AlsaFirewire:card_id] instead.</doc-deprecated>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="device"
                version="0.3"
                deprecated="1"
                deprecated-version="2.5."
                transfer-ownership="none"
                default-value="NULL">
        <doc-deprecated xml:space="preserve">Use [property@Hitaki.AlsaFirewire:node-device] instead.</doc-deprecated>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="guid"
                version="0.4"
                deprecated="1"
                deprecated-version="2.5."
                transfer-ownership="none"
                default-value="0">
        <doc-deprecated xml:space="preserve">Use [property@Hitaki.AlsaFirewire:guid] instead.</doc-deprecated>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="streaming"
                version="0.4"
                deprecated="1"
                deprecated-version="2.5."
                transfer-ownership="none"
                default-value="FALSE">
        <doc-deprecated xml:space="preserve">Use [property@Hitaki.AlsaFirewire:is-locked] instead.</doc-deprecated>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="type"
                version="1.0"
                deprecated="1"
                deprecated-version="2.5."
                transfer-ownership="none"
                default-value="HINAWA_SND_UNIT_TYPE_DICE">
        <doc-deprecated xml:space="preserve">Use [property@Hitaki.AlsaFirewire:unit-type] instead.</doc-deprecated>
        <type name="SndUnitType"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="disconnected"
                   when="last"
                   version="2.0"
                   deprecated="1"
                   deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_unit.c"
             line="229">Emitted when the sound card is not available anymore due to unbinding driver or hot
unplugging. The owner of this object should call [method@GObject.Object.unref] as
quickly as possible to release ALSA hwdep character device.</doc>
        <doc-deprecated xml:space="preserve">Use change notify signal of
       [property@Hitaki.AlsaFirewire:is-disconnected] instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="lock-status"
                   when="last"
                   version="0.3"
                   deprecated="1"
                   deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_unit.c"
             line="208">Emitted when corresponding ALSA driver changes status of lock by starting/stopping
packet streaming requested by ALSA PCM/Rawmidi applications.</doc>
        <doc-deprecated xml:space="preserve">Use change notify signal of [property@Hitaki.AlsaFirewire:is-locked]
       instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/snd_unit.c"
                 line="211">%TRUE when locked, %FALSE when unlocked.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="SndUnitClass"
            c:type="HinawaSndUnitClass"
            glib:is-gtype-struct-for="SndUnit">
      <source-position filename="src/snd_unit.h" line="44"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="lock_status">
        <callback name="lock_status">
          <source-position filename="src/snd_unit.h" line="31"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/snd_unit.h"
                   line="22">A [class@SndUnit]</doc>
              <type name="SndUnit" c:type="HinawaSndUnit*"/>
            </parameter>
            <parameter name="state" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/snd_unit.h"
                   line="23">%TRUE when locked, %FALSE when unlocked.</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="disconnected">
        <callback name="disconnected">
          <source-position filename="src/snd_unit.h" line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/snd_unit.h"
                   line="35">A [class@SndUnit]</doc>
              <type name="SndUnit" c:type="HinawaSndUnit*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="SndUnitError"
                 version="2.1"
                 deprecated="1"
                 deprecated-version="2.5."
                 glib:type-name="HinawaSndUnitError"
                 glib:get-type="hinawa_snd_unit_error_get_type"
                 c:type="HinawaSndUnitError"
                 glib:error-domain="hinawa-snd-unit-error-quark">
      <doc xml:space="preserve"
           filename="src/hinawa_enum_types.h"
           line="193">A set of error code for [struct@GLib.Error] with domain which equals to Hinawa.SndUnitError.</doc>
      <doc-deprecated xml:space="preserve">Use Hitaki.AlsaFirewireError in libhitaki library instead.</doc-deprecated>
      <member name="disconnected"
              value="0"
              c:identifier="HINAWA_SND_UNIT_ERROR_DISCONNECTED"
              glib:nick="disconnected"
              glib:name="HINAWA_SND_UNIT_ERROR_DISCONNECTED">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="195">The hwdep device associated to the instance is disconnected.</doc>
      </member>
      <member name="used"
              value="1"
              c:identifier="HINAWA_SND_UNIT_ERROR_USED"
              glib:nick="used"
              glib:name="HINAWA_SND_UNIT_ERROR_USED">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="196">The hedep device is already in use.</doc>
      </member>
      <member name="opened"
              value="2"
              c:identifier="HINAWA_SND_UNIT_ERROR_OPENED"
              glib:nick="opened"
              glib:name="HINAWA_SND_UNIT_ERROR_OPENED">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="197">The instance is already associated to unit by opening hwdep
				character device.</doc>
      </member>
      <member name="not_opened"
              value="3"
              c:identifier="HINAWA_SND_UNIT_ERROR_NOT_OPENED"
              glib:nick="not-opened"
              glib:name="HINAWA_SND_UNIT_ERROR_NOT_OPENED">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="199">The instance is not associated to unit yet by opening hwdep
				character device.</doc>
      </member>
      <member name="locked"
              value="4"
              c:identifier="HINAWA_SND_UNIT_ERROR_LOCKED"
              glib:nick="locked"
              glib:name="HINAWA_SND_UNIT_ERROR_LOCKED">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="201">The hwdep device is already locked for kernel packet streaming.</doc>
      </member>
      <member name="unlocked"
              value="5"
              c:identifier="HINAWA_SND_UNIT_ERROR_UNLOCKED"
              glib:nick="unlocked"
              glib:name="HINAWA_SND_UNIT_ERROR_UNLOCKED">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="202">The hwdep device is not locked for kernel packet streaming yet.</doc>
      </member>
      <member name="wrong_class"
              value="6"
              c:identifier="HINAWA_SND_UNIT_ERROR_WRONG_CLASS"
              glib:nick="wrong-class"
              glib:name="HINAWA_SND_UNIT_ERROR_WRONG_CLASS">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="203">The hwdep device is not for the unit expected by the class.</doc>
      </member>
      <member name="failed"
              value="7"
              c:identifier="HINAWA_SND_UNIT_ERROR_FAILED"
              glib:nick="failed"
              glib:name="HINAWA_SND_UNIT_ERROR_FAILED">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="204">The system call fails.</doc>
      </member>
      <function name="quark"
                c:identifier="hinawa_snd_unit_error_quark"
                version="2.1"
                deprecated="1"
                deprecated-version="2.5.">
        <doc xml:space="preserve"
             filename="src/snd_unit.c"
             line="25">Return the [alias@GLib.Quark] for [struct@GLib.Error] which has code in Hinawa.SndUnitError.</doc>
        <doc-deprecated xml:space="preserve">Use Hitaki.AlsaFirewireError instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/snd_unit.c"
               line="33">A [alias@GLib.Quark].</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <enumeration name="SndUnitType"
                 version="1.0"
                 deprecated="1"
                 deprecated-version="2.5."
                 glib:type-name="HinawaSndUnitType"
                 glib:get-type="hinawa_snd_unit_type_get_type"
                 c:type="HinawaSndUnitType">
      <doc xml:space="preserve"
           filename="src/hinawa_enum_types.h"
           line="116">A representation of type for sound unit defined by Linux sound subsystem.</doc>
      <doc-deprecated xml:space="preserve">Use [enum@Hitaki.AlsaFirewireType] in libhitaki library instead.</doc-deprecated>
      <member name="dice"
              value="1"
              c:identifier="HINAWA_SND_UNIT_TYPE_DICE"
              glib:nick="dice"
              glib:name="HINAWA_SND_UNIT_TYPE_DICE">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="118">The type of DICE ASIC.</doc>
      </member>
      <member name="fireworks"
              value="2"
              c:identifier="HINAWA_SND_UNIT_TYPE_FIREWORKS"
              glib:nick="fireworks"
              glib:name="HINAWA_SND_UNIT_TYPE_FIREWORKS">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="119">The type of Fireworks board module.</doc>
      </member>
      <member name="bebob"
              value="3"
              c:identifier="HINAWA_SND_UNIT_TYPE_BEBOB"
              glib:nick="bebob"
              glib:name="HINAWA_SND_UNIT_TYPE_BEBOB">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="120">The type of BeBoB ASIC.</doc>
      </member>
      <member name="oxfw"
              value="4"
              c:identifier="HINAWA_SND_UNIT_TYPE_OXFW"
              glib:nick="oxfw"
              glib:name="HINAWA_SND_UNIT_TYPE_OXFW">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="121">The type of OXFW ASIC</doc>
      </member>
      <member name="digi00x"
              value="5"
              c:identifier="HINAWA_SND_UNIT_TYPE_DIGI00X"
              glib:nick="digi00x"
              glib:name="HINAWA_SND_UNIT_TYPE_DIGI00X">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="122">The type of Digi00x series.</doc>
      </member>
      <member name="tascam"
              value="6"
              c:identifier="HINAWA_SND_UNIT_TYPE_TASCAM"
              glib:nick="tascam"
              glib:name="HINAWA_SND_UNIT_TYPE_TASCAM">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="123">The type of Tascam FireWire series.</doc>
      </member>
      <member name="motu"
              value="7"
              c:identifier="HINAWA_SND_UNIT_TYPE_MOTU"
              glib:nick="motu"
              glib:name="HINAWA_SND_UNIT_TYPE_MOTU">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="124">The type of MOTU FireWire series.</doc>
      </member>
      <member name="fireface"
              value="8"
              c:identifier="HINAWA_SND_UNIT_TYPE_FIREFACE"
              glib:nick="fireface"
              glib:name="HINAWA_SND_UNIT_TYPE_FIREFACE">
        <doc xml:space="preserve"
             filename="src/hinawa_enum_types.h"
             line="125">The type of RME Fireface series.</doc>
      </member>
    </enumeration>
    <function name="cycle_time_parse_tstamp"
              c:identifier="hinawa_cycle_time_parse_tstamp"
              moved-to="CycleTime.parse_tstamp"
              version="2.6">
      <doc xml:space="preserve"
           filename="src/cycle_time.c"
           line="169">Parse second count and cycle count from unsigned 16 bit integer value retrieved by Asynchronous
Transmit (AT), Asynchronous Receive(AR), Isochronous Transmit (IT), and Isochronous Receive (IR)
contexts of 1394 OHCI.</doc>
      <source-position filename="src/cycle_time.h" line="28"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="tstamp" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/cycle_time.c"
               line="171">The value of time stamp retrieved from each context of 1394 OHCI.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="isoc_cycle"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/cycle_time.c"
               line="172">The result to parse the time stamp. The
	first element is for three order bits of second field in the format of IEEE 1394
	CYCLE_TIME register, up to 7. The second element is for 13 bits of cycle field in
	the format, up to 7,999.</doc>
          <array zero-terminated="0" c:type="guint*" fixed-size="2">
            <type name="guint" c:type="guint"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="fw_fcp_error_quark"
              c:identifier="hinawa_fw_fcp_error_quark"
              moved-to="FwFcpError.quark"
              version="2.1">
      <doc xml:space="preserve"
           filename="src/fw_fcp.c"
           line="20">Return the [alias@GLib.Quark] for [struct@GLib.Error] which has code in Hinawa.FwFcpError.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/fw_fcp.c"
             line="27">A [alias@GLib.Quark].</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="fw_node_error_quark"
              c:identifier="hinawa_fw_node_error_quark"
              moved-to="FwNodeError.quark"
              version="2.1">
      <doc xml:space="preserve"
           filename="src/fw_node.c"
           line="41">Return the [alias@GLib.Quark] for [struct@GLib.Error] with Hinawa.FwNodeError domain.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/fw_node.c"
             line="48">A [alias@GLib.Quark].</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="fw_req_error_quark"
              c:identifier="hinawa_fw_req_error_quark"
              moved-to="FwReqError.quark"
              version="2.1">
      <doc xml:space="preserve"
           filename="src/fw_req.c"
           line="19">Return the [alias@GLib.Quark] for [struct@GLib.Error] with code of [enum@FwRcode].</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/fw_req.c"
             line="26">A [alias@GLib.Quark].</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="fw_resp_error_quark"
              c:identifier="hinawa_fw_resp_error_quark"
              moved-to="FwRespError.quark"
              version="2.2">
      <doc xml:space="preserve"
           filename="src/fw_resp.c"
           line="18">Return the [alias@GLib.Quark] for error domain of [struct@GLib.Error] which has code in
Hinawa.FwRespError.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/fw_resp.c"
             line="26">A [alias@GLib.Quark].</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="snd_dice_error_quark"
              c:identifier="hinawa_snd_dice_error_quark"
              moved-to="SndDiceError.quark"
              version="2.1"
              deprecated="1"
              deprecated-version="2.5.">
      <doc xml:space="preserve"
           filename="src/snd_dice.c"
           line="16">Return the [alias@GLib.Quark] for [struct@GLib.Error] which has code in Hinawa.SndDiceError.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/snd_dice.c"
             line="24">A [alias@GLib.Quark].</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="snd_unit_error_quark"
              c:identifier="hinawa_snd_unit_error_quark"
              moved-to="SndUnitError.quark"
              version="2.1"
              deprecated="1"
              deprecated-version="2.5.">
      <doc xml:space="preserve"
           filename="src/snd_unit.c"
           line="25">Return the [alias@GLib.Quark] for [struct@GLib.Error] which has code in Hinawa.SndUnitError.</doc>
      <doc-deprecated xml:space="preserve">Use Hitaki.AlsaFirewireError instead.</doc-deprecated>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/snd_unit.c"
             line="33">A [alias@GLib.Quark].</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
  </namespace>
</repository>
