// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use hinawa_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::ptr;
use FwNode;
use FwResp;

glib_wrapper! {
    pub struct FwFcp(Object<hinawa_sys::HinawaFwFcp, hinawa_sys::HinawaFwFcpClass, FwFcpClass>) @extends FwResp;

    match fn {
        get_type => || hinawa_sys::hinawa_fw_fcp_get_type(),
    }
}

impl FwFcp {
    pub fn new() -> FwFcp {
        unsafe {
            from_glib_full(hinawa_sys::hinawa_fw_fcp_new())
        }
    }
}

impl Default for FwFcp {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_FW_FCP: Option<&FwFcp> = None;

pub trait FwFcpExt: 'static {
    fn bind<P: IsA<FwNode>>(&self, node: &P) -> Result<(), glib::Error>;

    fn unbind(&self);

    fn get_property_is_bound(&self) -> bool;

    fn get_property_timeout(&self) -> u32;

    fn set_property_timeout(&self, timeout: u32);

    fn connect_property_is_bound_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_timeout_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<FwFcp>> FwFcpExt for O {
    fn bind<P: IsA<FwNode>>(&self, node: &P) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = hinawa_sys::hinawa_fw_fcp_bind(self.as_ref().to_glib_none().0, node.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn unbind(&self) {
        unsafe {
            hinawa_sys::hinawa_fw_fcp_unbind(self.as_ref().to_glib_none().0);
        }
    }

    fn get_property_is_bound(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"is-bound\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `is-bound` getter").unwrap()
        }
    }

    fn get_property_timeout(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"timeout\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `timeout` getter").unwrap()
        }
    }

    fn set_property_timeout(&self, timeout: u32) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"timeout\0".as_ptr() as *const _, Value::from(&timeout).to_glib_none().0);
        }
    }

    fn connect_property_is_bound_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_is_bound_trampoline<P, F: Fn(&P) + 'static>(this: *mut hinawa_sys::HinawaFwFcp, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<FwFcp>
        {
            let f: &F = &*(f as *const F);
            f(&FwFcp::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::is-bound\0".as_ptr() as *const _,
                Some(transmute(notify_is_bound_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_timeout_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_timeout_trampoline<P, F: Fn(&P) + 'static>(this: *mut hinawa_sys::HinawaFwFcp, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<FwFcp>
        {
            let f: &F = &*(f as *const F);
            f(&FwFcp::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::timeout\0".as_ptr() as *const _,
                Some(transmute(notify_timeout_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for FwFcp {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "FwFcp")
    }
}
